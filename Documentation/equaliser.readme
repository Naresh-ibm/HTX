
README for Equaliser Feature in HTX
================================================================================
Last update:
                22nd Dec, 2016 - Preeti Dhir (preedhir@in.ibm.com)
                3rd April, 2014 - Preeti Dhir (preedhir@in.ibm.com)
                1st March,2009 - Amit Gupta (amgupta9@in.ibm.com)

Table of contents:
================================================================================
1)  Goal
2)  Salient Features
3)  Hardware supported & HW test scope
4)  Supported OS
5)  General info
6)  Prerequisites
7)  Description and sample Files
8)  Exerciser specific Log files
9)  Understanding htxstats
10) Throughput numbers
11) Common config errors
12) Miscompare analysis & Debugging
13) Limitations
14) Known Issues

================================================================================

1) Goal:
--------

HTX Equalizer would give the user the ability to throttle the HTX exercisers to a certain amount of time ( much the same way as one would using an equalizer in a 
soundboard). The need for Equaliser came due to the requirement of providing the ability to  start/stop the exercisers as per a given pattern over a time interval. 
The Processor Characterization wanted this HTX feature to do their thermal and power testing.

More power workloads, thread utilization, and erratic workload behavior to stress the systems ability to manage power, thermal & performance are  needed across all 
P7 systems.Thus the ability to control the HTX exerciser's physical thread affinity, definitively start/stop them in specific time intervals configure the above 
using a control file & allow for clean inter-o peration, were all required in order to allow the tester to effectively stress the target system.Therefore the  
Equaliser feature in HTX was developed to provide all of the above functionality, in order to augment testing of Power Management features in Power7.


2) Salient Features:
--------------------
a. The Equaliser supports deterministic STOP/START's of the following HTX exercisers:
   1. hxefpu64 - Floating Point test program
   2. hxecache - Cache stress program
   3. hxemem64 - Memory stress program
   4. hxecpu   - Generic cpu exerciser
   5. hxeewm   - Energy workload manager exerciser

Any combination of these exercisers can be used depending on the machine configuration.

b. Specialized rule files, for each of the exercisers supported, to configure them on the cpu they bind to, when running under the equaliser.

c. The Equaliser is configured by the tester via the Equaliser configuration file ( e.g. $HTXPATH/htx_eq.cfg. By default HTXPATH is /usr/lpp/htx)
 . Via this file ,the following may be specified for each individual exerciser:
   1. Resource id string (tells on which all cpu resources to run the test program.
   2. Test Program to run 
   3. Test program start time and run time.
   4. Each Programs individual Cpu Utilization for a time interval ( %age number/s )
   5. Each Programs individual Cpu Utilization sequence ( a bit pattern )
   Please see "Description" section below for a detailed description of config file parameters.

d. create_eq_mdt binary in $HTXPATH/bin directory  can be used by the tester to create an htx mdt file for the Equaliser based on the
   configuration file. Please see "Description" section below for a detailed description of how to use it.

e. Equaliser provides high granularity of control over Load scenarios. Run time controllability is given to the tester, without the need to
   consult exerciser experts. Run/Stop Control is provided to the tester at an individual exerciser level.
   
f. Specific processor modules can be targeted by the tester.


3)Hardware supported & HW test scope:
-------------------------------------

HTX Equaliser is supported on Power6 and above.
It is mainly intended to enhance the testing of Power management features of processor chip using HTX exerciser's.
 
4) Supported OS:
----------------

AIX: Y
Linux: Y
BML: Y


5) General info:
----------------

Quick Start - ( at the root command prompt )

a. First HTX setup is required to create any mdt file manually coressponding to any cfg file. Run below script
   to setup the env.
   ${HTXPATH}/etc/scripts/htx_env.sh (for Linux)
   ${HTXPATH}/etc/scripts/htx_env (for AIX)
b. Go to the $HTXPATH/bin folder and run the create_eq_mdt binary with the  command 
   ./create_eq_mdt <cfg_file> <mdt file to create>
   Both the file names should be absolute path.
c. A new mdt file would now have been created by the name specified
d. Verify that the equaliser rule files are present in each of the exerciser rule folders.
   ( rule files are named as default.<exerciser name>.eq ).
e. Run the HTX test by choosing the mdt created using above step.


6) Prerequisites:
-----------------

h/w requirements - Should be used on P6 and above.

s/w config -
             Can be run only under the HTX framework i.e HTX must be installed correctly.
             Initial HTX setup must be complete ( done when we switch user to htx, i.e "su - htx" command )
             An adequate configuration file must be present in the HTX HOME folder ( default is /usr/lpp/htx ) named "htx_eq.cfg"
             An mdt file with entries corresponding to the Equaliser configuration file, is required in the HTX MDT FOLDER.
             ( Requires an additional manual step of running the parsing script as described in the section "Quick Start" )

             NOTE: All the equaliser cfgs and mdts are created only if the system is not in "shared processor mode".
7) Description:
----------------------
   
The various components of the Equaliser in the HTX framework are as follows:

Equaliser Configuration File 
-----------------------------

The Equaliser configuration file is means by which the tester can specify the following:

a. The value of time_quantum variable in milliseconds.
     This basically represents the minimum granularity of start/stop control the Equaliser will have over any exerciser.
     Each bit of a Cpu Utilization pattern (explained later), is therefore mapped onto one 'time_quantum'.
     A '1' bit means 'ON' or "Running"
     A '0' bit means 'OFF' or "Stopped"
     'time_quantum' duration: Each Cpu Utilization pattern can be taken as <n> bits long, means that an interval of <n>
     'time_quantum' s , forms one cycle of execution for each exerciser under the Equaliser.

b. The value of startup_time_delay in seconds.
     This is the initial time duration for which all the exercisers are allowed to run uninterrupted, before each of the ones
     configured under the Equaliser are modulated as per their respective Cpu Utilization Sequences/Patterns.
     Some exercisers spend a larger chunk of time initially in order to perform some setup tasks prior to doing their actual
     intended work. This configurable delay allows them to complete those setup tasks,and get into doing real work , before
     their execution is modulated by the supervisor.

c. log_duration is specified in seconds. This specifies the time duration for which to keep the log entries.

d. pattern_length specifies the length of utilization pattern.

e. offline_cpu tells whether to make a cpu offline when the exerciser running is STOPPED. (Support in Linux only)

f. Resource Id string (in the form of N*P*C*T*)

g. The exerciser/s to run.

h. Rule file to be used by each exerciser.

i. exerciser start time

j. run time of the exerciser (i.e. duration for which exerciser will be running)
 
k. Cpu Utilization Sequence for each exerciser.
     This represents the Cpu Utilization as a percentage (%) number , for each exerciser , for one cycle of execution (20 time_quantum's)
     of the exerciser. As we will see later, more than one value may be specified for each cycle of execution as a list.

l. The Cpu Utilization Pattern for each exerciser ( by default, a 20 bit pattern)
     This is a 20 bit number or less, that represents the ON/OFF sequence,that each exerciser will follow, for one execution cycle.

A detailed description of the above in the context of a sample Equaliser configuration file follows:

Sample snapshot of the Equaliser configuration file is as below:

============================================================================================
# if first letter in the line is "#", its taken as a comment

#time_quantum in milliseconds
time_quantum = 1000

#startup time delay specified in seconds
startup_time_delay = 30

# Log equalizer status for the last 60 secs only
log_duration = 60

#Length of utilizationPattern in case of UTIL_LEFT/UTIL_RIGHT/UTIL_RANDOM
pattern_length = 20

#Flag to specify whether to make  cpu offline when workload running on it is STOPPED.
offline_cpu = 0

# In utilisationSequence,upto 10 steps are allowed.
#

#Resource id    #Comma separated device list with config parameters
#-----------    ----------------------------------------------------
N0P0C0T0        mem[default.mem.eq.64k:0:0:UTIL_LEFT%20_50_80]
N0P0C0T1        fpu[default.fpu.eq:0:0:UTIL_RANDOM%40]
N0P0C0T2        cache[default.cache.eq:10:20:11001100110011001100]
N0P0C0T3        cpu[default.cpu.eq:0:0:11011010]

=============================================================================================
Important points to note are :
a. Any line starting with a '#' is treated as a comment and ignored.

b. The value of 'time_quantum' is specified in milliseconds.
     This is the minimum granularity of start/stop control the Equaliser will have over any exerciser. Only a decimal value can be given here.

c. The value of startup_time_delay is specified in seconds.
     This parameter controls the time interval for which all the exercisers will be allowed to run un-interrupted. There are some exercisers
     that spend their first few cpu cycles doing some initial setup (setting up shared memory etc), before they get to do any actual work.
     This delay allows them that time duration before the utilisation patterns/sequences are interpreted and acted upon by the Equaliser.
     This parameter can be tuned to necessary requirements depending on the combination of exercisers being included.
     Again only a decimal value should be given here.
d. log_duration is specified in seconds.
    This specifies the time duration for which to keep the log entries. The log file will be having entries for the last <log_duration> seconds.

e. pattern_length specifies the length of utilization pattern.
    This paramater will be valid only for the devices whose utilization pattern is UTIL_LEFT/UTIL_RIGHT/UTIL_RANDOM. In case of explicitly defined
    utilization pattern, it will be ignored. Default value for this is 20.
f. offline_cpu specifies whether to make cpu offline or not.
    If this parameter is set to "1", when exerciser goes from "RN" to "STOPPED" state, cpu will be made offline by setting "0" in below file:
    /sys/devices/system/cpu/cpu*/online
    Before workload start running again, cpu will be brought online.

The rest of the configuration file is interpreted as follows:

g. FIRST COLUMN:
     This specifies the affinity of the device to a particular cpu. It is represented in the form of
     N*P*C*T*
     where N stands for node number, P for chip number, C for core number and T for thread number.
     * specifies all the nodes/cpus/core/threads on the system.

     One can specify a paticulr number also for any of these. e.g.
     N0P0C0T0
     which means affinity is to the thread 0 of node0, chip 0 and core 0.

     Even a range of numbers can be specified. e.g.
     N*P*C*T[0-2]
     which meand thread 0, 1 and 2 of all the cores on all cpu of all the nodes present in the system.

     Another way of specifying the range is as below:
     N*P*C[2-n]T0
     here range specifies from core 2 to n where "n" means till the last core number available for each of
     the cpu for all the nodes on the system.

h. SECOND COLUMN:
     This is the device name followed by various input parameters for it in square bracket. These parameters are 
     separated by ':'  which is used as a delimiter.
     One can define multiple devices for a given resource id separated by comma. e.g.
         N0P0C0T0        mem[default.mem.eq.64k:0:10:UTIL_LEFT%20_50_80],fpu[default.fpu.eq:10:20:1100110]
         
     1st paramter tells which rule file to use for that specific exerciser given.
     
     2nd paramater gives the time delay to start this particular exerciser. This is the time difference between HTX start time and
     exerciser start time.
     
     3rd parameter tells about the runtime of the exerciser i.e. duration for which it will be running.
     
     4th parameter is cpu utilization. It can either be %age cpu utilization or explicit bit pattern.
     
     %age utilization can be a single number or  a series of "_" separated numbers (upto 10 numbers). These number should be with a range of
     [0-100] in multiples of 5. Each %age utilization number applies to a time interval of <pattern_length> * time_quantum's.
     By default pattern_lenmgth is 20. So, %age utilization will be applied to "20*time_quantum".
     When more than one %age number is specified,they must be specified as a "_" separated list e.g.
         mem[default.mem.eq.64k:0:0:UTIL_LEFT%20_50_80]
         This means that mem will have 20% cpu
         utilization in the first "20*time_quantum interval" and 50% cpu utilization in the next "20*time_quantum interval" and 80% in the
         third interval.The list of sequence number is applied in a Round Robin fashion.i.e when at the end of the list, in the next time
         interval, the cpu utilization applied ,will again be the first one specified in the list.    
      
      The %age utilization is prefixed by UTIL_LEFT/UTIL_RIGHT/UTIL_RANDOM.
      Below is the meaning of each of these values:
      
       1. UTIL_LEFT:
          In this case, all the '1' bits for a given % cpu utilization will be aligned to left. E.g. if cpu utilization defined 
          is 40%  , The utilization Pattern will be 11111111000000000000 i.e. all the 1 bits will be aligned to left.

       2. UTIL_RIGHT:
          In this case, all the 1 bits for a given % cpu utilization will be aligned to right. e.g. if cpu utilization defined 
          is 40%  , The utilization Pattern  will be 00000000000011111111 i.e. all 1 bits aligned to right.

       3. UTIL_RANDOM:
          In this case, utilization pattern generated will be such that the 1 bits generated for a given % cpu utilization can be placed
          randomly anywhere.  After every <pattern_length> time_quantum's, a new pattern will be generated.
     
      Explicit bit pattern is a pattern of '1's and '0's. Each bit represents a RUN/STOP state of the corresponding exerciser for one 
      time_quantum. A '1' represents "running" and '0' represents "stopped" e.g 11001100101100101010
     
     
Individual Exerciser Rule Files 

a. Each exerciser running under the Equaliser uses a specialized rule file present under the rules folder for that exerciser.
b. The naming convention of each exercisers Equaliser rule file is default.<exerciser name>.eq.
     Example:  for hxecache, the relevant rule file would be in $HTXPATH/rules/reg/hxecache directory .
c. The special rule files are to configure the exercisers to only run 1 thread, so that the utilization sequences/patterns specified
   against those exercisers are accurately applied when the exerciser is running.
d. These values should not be modified.
e. Refer to the individual exerciser README files for a detailed description of their rule file parameters.

Creating mdt corresponding to equaliser configuration file 

   During HTX setup time, by default whatever cfg files are present in $HTXPATH/equaliser_cfgs directory, a corresponding mdt will be
   created for each one of them. To explicitly create a mdt corresponding to a given cfg, use following steps:

a. The binary named "create_eq_mdt" found in the $HTXPATH/bin directory is used to create an mdt corresponding to
   configuration in the Equaliser
   It can be used as:
       $HTXPATH/bin/create_eq_mdt $HTXPATH/equaliser_cfgs/htx_eq.cfg $HTXPATH/mdt/mdt.eq
   This will create the desired mdt file for the Equaliser with the name "mdt.eq" in the HTX MDT FOLDER ( $HTXPATH/mdt )

Sample Equaliser MDT File 
--------------------------

The snapshot of a sample mdt.eq file generated for the sample Equaliser configuration file as shown as above:

=============================================================================================

default:
        HE_name = ""                      * Hardware Exerciser name, 14 char
        adapt_desc = ""                   * adapter description, 11 char max.
        device_desc = ""                  * device description, 15 char max.
        reg_rules = ""                    * reg rules
        emc_rules = ""                    * emc rules
        dma_chan = 0                      * DMA channel number
        idle_time = 0                     * idle time (secs)
        intrpt_lev = 0                    * interrupt level
        load_seq = 32768                  * load sequence (1 - 65535)
        max_run_tm = 7200                 * max run time (secs)
        port = "0"                        * port number
        priority = 19                     * priority (1=highest to 19=lowest)
        slot = "0"                        * slot number
        max_cycles = "0"                  * max cycles
        hft = 0                           * hft number
        cont_on_err = "YES"               * continue on error (YES/NO)
        halt_level = "1"                  * level <= which HE halts
        start_halted = "n"                * exerciser halted at startup
        dup_device = "n"                  * duplicate the device
        log_vpd = "y"                     * Show detailed error log
        equaliser_flag = "1"              * Equaliser flag enabled for supervisor
        equaliser_debug_flag = "0"        * Equaliser Debug Flag for supervisor
        eq_time_quantum = "1000"          * Equaliser time quantum
        eq_startup_time_delay = "60"      * Equaliser startup time delay
        eq_log_duration = "60"            * Equaliser log duration
        eq_pattern_length = "10"          * Equaliser default pattern length
        cfg_file = "htx_eq.cfg"           * Corresponding cfg file for this mdt

mem0:
        HE_name = "hxemem64"              * Hardware Exerciser name, 14 char
        adapt_desc = "64bit"              * adapter description, 11 char max.
        device_desc = "memory"            * device description, 15 char max.
        reg_rules = "hxemem64/default.mem.eq.64k"   * reg
        emc_rules = "hxemem64/default.mem.eq.64k"   * emc
        cont_on_err = "NO"                * continue on error (YES/NO)
        cpu_utilization = "UTIL_LEFT%20_50_80"      * cpu utilization info for the exerciser

fpu1:
        HE_name = "hxefpu64"              * Hardware Exerciser name, 14 char
        adapt_desc = "core"               * adapter description, 11 char max.
        device_desc = "floating_point"    * device description, 15 char max.
        reg_rules = "hxefpu64/default.fpu.eq"       * reg
        emc_rules = "hxefpu64/default.fpu.eq"       * emc
        cont_on_err = "NO"                * continue on error (YES/NO)
        cpu_utilization = "UTIL_RANDOM%40"          * cpu utilization info for the exerciser

cache2:
        HE_name = "hxecache"              * Hardware Exerciser name, 14 char
        device_desc = "Processor_Cache"   * device description, 15 char max.
        reg_rules = "hxecache/default.cache.eq"     * reg
        emc_rules = "hxecache/default.cache.eq"     * emc
        cont_on_err = "NO"                * continue on error (YES/NO)
        start_delay = "10"                * Exerciser start delay.
        run_time = "20"                   * Exerciser run time.
        cpu_utilization = "11001100110011001100"    * cpu utilization info for the exerciser
        
cpu3:
        HE_name = "hxefpu64"              * Hardware Exerciser name, 14 char
        adapt_desc = "core"               * adapter description, 11 char max.
        device_desc = "floating_point"    * device description, 15 char max.
        reg_rules = "hxefpu64/default.fpu.eq"       * reg
        emc_rules = "hxefpu64/default.fpu.eq"       * emc
        cont_on_err = "NO"                * continue on error (YES/NO)
        cpu_utilization = "11011010"                * cpu utilization info for the exerciser

=============================================================================================

various parameters which are present in default stanza and are meant only for equlaiser process are:
a. equaliser_flag: The Equaliser flag is set to "1" in the default stanza. This flag indicates to enable the equaliser under HTX.

b. equaliser_debug_flag: This is DISABLED by default. In order to enable some additional debug messages in the HTX log files (/tmp/htxmsg), 
   this flag may be manually enabled for such purposes. With this exception, we strongly recommend that the Equaliser mdt file NOT be modified
   manually and/or hand crafted. It should ALWAYS be created using the parsing script ( $HTXPATH/etc/scripts/parse_Equaliser_config_file.awk ).

c. cfg_file : This tells the CFG file name corresponding to the mdt.

Other parameters which are meant only for equaliser process and are explained earlier(these are taken from CFG file):
eq_time_quantum: .
eq_startup_time_delay
eq_log_duration 
eq_pattern_length

In the exerciser stanza, additional parameter which is meant only for equaliser process is:
cpu_utilization: This gives the % utilization or the explicit bit pattern to define the workload running pattern.


8) Exerciser specific Log files:
--------------------------------
1. $HTX_LOG_DIR/eq_status (by default $HTX_LOG_DIR is /tmp) is the primary logfile to look at for all equaliser 
   related logs for sending signal to varioyus exerciser. START/STOP messages are printed for all the 
   exercisers here.
   
2. With equaliser_debug_flag enabled, additional msgs. can be seen in htxmsg log also.

3. For exerciser specific log file information, please refer to the exerciser's README file.

9) Understanding htxstats:
---------------------------
This information is exerciser specific.
Please refer to exerciser README file, for the exercisers configured.


10) Throughput numbers:
-----------------------
This information is exerciser specific.
Please refer to exerciser README file, for the exercisers configured.


11) Common config errors:
-------------------------
All of the following must be kept in mind when configuring and running the Equaliser:

a. For the Equaliser configuration file, we support the use of a UNIX ASCII text file only. Use of a file
   created/edited on windows is not supported as they can lead to unexpected behaviors of the Equaliser.
b. The above argument also applies to the Equaliser mdt file ( $HTXPATH/mdt/mdt.eq )
c. The Resource requirements of each instance of an exerciser that the tester intends to configure must be verified as available by the
   tester before configuring & running the Equaliser.
d. Additional HTX exercisers may be added to the equaliser mdt file manually if required for a particular run/configuration.
   Although, this must be done with discretion, keep (b) & (c) in mind. Also the existing, configured stanza's must not be
   altered.

As a general rule of thumb:
  "Accuracy and deterministic behavior of the Equaliser will deteriorate,when resource contention starts to happen between the processes on
   the system".Therefore it is generally good to make the Equaliser configuration keeping in mind whether the available physical resources
   are more than sufficient.

A few examples:
1. Logical Cpu 12 must be present before an exerciser can be bound to it by specifying the same in the Equaliser config file (i.e like
   saying cache12)
2. Memory requirements for each instance of the exercisers must be met on the system.
   Ex. Every instance of "mem" exerciser (hxemem64), when run with its Equaliser rule file, requires 256MB of memory. Therefore the total sum
   of memory required by all instance of hxemem64, must be < 70% of the total available memory ( leaving 30% for other System processes to
   run ).

e. Specifying a Cpu Utilization Sequence with more than 10 numbers is not allowed and will cause the Equaliser to exit out.

f. If any required field like time_quantum is missing or both Cpu utilization sequence and pattern is missing, the Equaliser
   will error out.

12) Miscompare analysis & Debugging :
------------------------------------
Miscomapre analysis if any during equaliser test run  is exerciser specific.
Please refer to the exerciser's README file that reported the miscompare.

A few tips for Debugging the equaliser process-

a. Equaliser Debug Flag.
     There is a "Equaliser_debug_flag"  under the default stanza in the Equaliser mdt file, that may be enabled to put additional debug
     messages in the HTX message files ( /tmp/htxmsg ). With this flag enabled , every time an exerciser is STARTED/STOPPED, a message is
     logged with a timestamp and the exerciser name. Therefore this file may be "grep"-ped for messages of a specific problematic exerciser
     and the accuracy of the timings may be verified.

b. Using 'topas' utility (on AIX) to verify CPU utilization values.
     The topas utility gives us "live" updates of the cpu/memory utilization and many other stat's of the all processes running on the system.
     Topas updates these stats periodically (by default every 2 seconds),and the stats displayed are an cumulative average of that sampling
     period. This time interval may be modified by the user using  ' -i ' flag , like : " topas -i <interval in seconds>".
     One could align the Topas sampling interval to the interval times of the Equaliser (i.e "20*time_quantum" , based on what is configured
     in the Equaliser configuration file). This way the Cpu Utilization numbers for each exerciser can be verified to fairly accurate values
     ( i.e approximately equal to the configured values).( Leaving room of course for inherent inaccuracies introduced by a possible mismatch
     between alignment of the Equaliser time interval & the topas time interval (i.e depends on when topas is actually run from the command
     line )

A sample snapshot of using topas this way is below :

when the Equaliser configuration was :
=============================================================================================

# if first letter in the line is "#", its taken as a comment

#timeQuantum in milliseconds
time_quantum = 1000

#startup time delay specified in seconds
startup_time_delay = 30

# In utilisationSequence,upto 10 steps and in utilisationPattern upto 20 bits are allowed.
#

#resource id     Comma separated device list with config parameters
#-----------      --------------------------------------------------
 N0P0C0T0          mem[default.mem.eq:0:0:UTIL_LEFT%20_50_80]
 N0P0C0T1          fpu[default.fpu.eq:0:0:UTIL_RANDOM%40]
 
=============================================================================================


topas -i 20  (time quantum being 1 sec,therefore topas interval set to 20 seconds)
=============================================================================================

Topas Monitor for host:    spartapart3-lx       EVENTS/QUEUES    FILE/TTY
Wed Mar  4 02:59:08 2009   Interval: 20         Cswitch      65  Readch      289
                                                Syscall   29735  Writech     171
CPU  User%  Kern%  Wait%  Idle%                 Reads         0  Rawin         0
ALL   56.7    2.7    0.1   40.5                 Writes        1  Ttyout       30
                                                Forks         0  Igets         0
Network  KBPS   I-Pack  O-Pack   KB-In  KB-Out  Execs         0  Namei         1
Total     0.1      2.0     0.2     0.1     0.0  Runqueue    0.7  Dirblk        0
                                                Waitqueue   0.0
Disk    Busy%     KBPS     TPS KB-Read KB-Writ                   MEMORY

Total     0.4      6.2     1.5     0.0     6.2  PAGING           Real,MB    7168
                                                Faults       13  % Comp     32

FileSystem        KBPS     TPS KB-Read KB-Writ  Steals        0  % Noncomp   1
Total              0.4     1.1    0.3    0.1    PgspIn        0  % Client    1
                                                PgspOut       0

Name            PID  CPU%  PgSp Owner           PageIn        0  PAGING SPACE

hxefpu64    2015392  39.9   2.1 root            PageOut       0  Size,MB   10752
hxemem64     417978  19.3   0.7 root            Sios          0  % Used      0

=============================================================================================

Therefore we see hxefpu64's & hxemem64's respective Cpu Utilization values very close the values configured in
the Equaliser configuration file shown above.

13) Limitations:
----------------
Currently only the following 5 exercisers are supported under the Equaliser:

   a. hxefpu64 - Floating Point test program
   b. hxecpu - Generic Fixed point test program
   c. hxecache - Cache stress program
   d. hxemem64 - Memory stress program
   e. hxeewm - energy workload manager program

14) Known Issues:
-----------------
