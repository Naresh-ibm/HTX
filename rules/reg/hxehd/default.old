*  "@(#)12 1.1.4.1 src/htx/usr/lpp/htx/rules/reg/hxehd/default.old, exer_hd, htxubuntu 7/25/13 05:35:13" *
*******************************************************************************
* COMPONENT_NAME: EXER_HD
*******************************************************************************
*---------------------------------------------------------------------------*
*- STANZA 1: Run getmode once to get current settings of mode data.
*---------------------------------------------------------------------------*
rule_id = GETMODE1
oper = xcmd
command = </dev/$d; getmode $d 0 1 >/tmp/getmode.$d 2>$o
skip = -10000

*---------------------------------------------------------------------------*
*- STANZA 2: Sequentially write the entire disk on every 6th iteration of  -*
*-           the rules file. This stanza will run in the background while  -*
*-           other stanza in the rules file are running.                   -*
*---------------------------------------------------------------------------*
rule_id = SEQBWRC2  
pattern_id = #003 
addr_type = seq
num_oper = 0
oper = bwrc
type_length = fixed
num_blks = 512
starting_block = 0
direction = up
no_mallocs = 1
loop_on_offset = yes
increment = 0
skip = -6

*---------------------------------------------------------------------------*
*- STANZA 3: Sleep for 2 minutes on every 6th iteration of the rules file. -*
*-           This lets the background thread (STANZA 1) initialize an area -*
*-           of the disk before the other rule stanzas start.              -*
*---------------------------------------------------------------------------*
rule_id = SLEEP3
oper = s
sleep = 120000000
skip = -6

*---------------------------------------------------------------------------*
*- STANZA 4: Sequentially compare the entire disk on every 5th iteration   -*
*-           of the rules file.                                            -*
*---------------------------------------------------------------------------*
rule_id = SEQRDC4
pattern_id = #003
addr_type = seq
num_oper = 0
oper = rc 
type_length = fixed
num_blks = 128
starting_block = 0
direction = up
no_mallocs = 10
loop_on_offset = yes
increment = 0
skip = 5

*---------------------------------------------------------------------------*
*- STANZA 5: Do a butterfly test on the drive on every 5 iteration of the  -*
*-           rules file. This will cause the drive to seek from the outer  -*  
*-           limits of the drive to the inner limits of the drive.         -*
*---------------------------------------------------------------------------*
rule_id = BUTRFLY5
pattern_id = #003 
addr_type = seq
num_oper = 0
oper = w
type_length = fixed
num_blks = 126
starting_block = bot
direction = in
no_mallocs = 1
loop_on_offset = yes
increment = 126
skip = 5

*---------------------------------------------------------------------------*
*- STANZA 6: Do random read compare 20000 times. - Thread 1                -*
*---------------------------------------------------------------------------*
rule_id = READCMP6
pattern_id = #003
addr_type = random
num_oper = 20000
oper = rc 
type_length = random
num_blks = 12
no_mallocs = 4
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 7: Do random read compare 20000 times. - Thread 2                -*
*---------------------------------------------------------------------------*
rule_id = READCMP7
pattern_id = #003
addr_type = random
num_oper = 20000
oper = rc 
type_length = fixed
num_blks = 64
no_mallocs = 4
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 8: Do random read write read compare 20000 times. - Thread 3     -*
*---------------------------------------------------------------------------*
rule_id = RDWRRDC8
pattern_id = #003
addr_type = random
num_oper = 20000
oper = rwrc 
type_length = random
num_blks = 20
no_mallocs = 4
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 9: Do random write read compare 10000 times. - Thread 4          -*
*---------------------------------------------------------------------------*
rule_id = RANDWRC9
pattern_id = #003
addr_type = random
num_oper = 10000
oper = wrc 
type_length = fixed
num_blks = 64
no_mallocs = 4
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 10: Do random read compare 20000 times. - Thread 5               -*
*---------------------------------------------------------------------------*
rule_id = RDCMP10
pattern_id = #003
addr_type = random
num_oper = 20000
oper = rc 
type_length = fixed
num_blks = 128
no_mallocs = 4
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 11: Do random read compare 20000 times. - Thread 6               -*
*---------------------------------------------------------------------------*
rule_id = RDCMP11
pattern_id = #003
addr_type = random
num_oper = 20000
oper = rc 
type_length = random
num_blks = 4
no_mallocs = 4
loop_on_offset = yes
start_stanza = yes

*---------------------------------------------------------------------------*
*- STANZA 12: Do sequential read compare 20000 times. Start of a new       -*
*-            sequence of threads. - Thread 1                              -*
*---------------------------------------------------------------------------*
rule_id = SEQRC12
pattern_id = #003
addr_type = seq 
num_oper = 20000
oper = rc 
type_length = fixed
num_blks = 8
no_mallocs = 8
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 13: Do sequential write 20000 times. - Thread 2                  -*
*---------------------------------------------------------------------------*
rule_id = SEQWR13
pattern_id = #003
addr_type = seq 
num_oper = 20000
oper = w
type_length = fixed
num_blks = 8
no_mallocs = 8
loop_on_offset = yes
start_stanza = no

*---------------------------------------------------------------------------*
*- STANZA 14: Do sequential read compare 20000 times. - Thread 3           -*
*---------------------------------------------------------------------------*
rule_id = SEQRC14
pattern_id = #003
addr_type = seq
num_oper = 20000
oper = rc
type_length = fixed
num_blks = 8
no_mallocs = 8
loop_on_offset = yes
start_stanza = yes

*---------------------------------------------------------------------------*
*- STANZA 15: Do 20000 random writes of pattern #004                       -*
*---------------------------------------------------------------------------*
rule_id = RANDWR15
pattern_id = #004
addr_type = random
num_blks = 32
oper = w
num_oper = 20000
type_length = random
rule_options = save_seeds
no_mallocs = 10
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 16: Do 20000 random read compares of pattern #004                -*
*---------------------------------------------------------------------------*
rule_id = RDCMP16
pattern_id = #004
addr_type = random
num_blks = 32
oper = rc
num_oper = 20000
type_length = random
rule_options = restore_seeds
no_mallocs = 10
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 17: Reinitializes disk to pattern #003 using same seeds as the   -*  
*-            previous 2 stanzas.                                          -*  
*---------------------------------------------------------------------------*
rule_id = RANDWR17
pattern_id = #003
addr_type = random
num_blks = 32
oper = w
num_oper = 20000
type_length = random
rule_options = restore_seeds
no_mallocs = 10
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 18: Do 20000 random read operations.                             -*
*---------------------------------------------------------------------------*
rule_id = RANDRD18
addr_type = random
num_oper = 20000
oper = r
type_length = fixed
num_blks = 32
no_mallocs = 10
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 19: Do 20000 random writes of pattern #005                       -*
*---------------------------------------------------------------------------*
rule_id = RANDWR19
pattern_id = #005
addr_type = random
num_oper = 20000
oper = w
type_length = fixed
num_blks = 128
rule_options = save_seeds
no_mallocs = 6
loop_on_offset = yes

*---------------------------------------------------------------------------*
* STANZA 20: Do 20000 random read compares of pattern #005                 -*
*---------------------------------------------------------------------------*
rule_id = RANDRC20
pattern_id = #005
addr_type = random
num_oper = 20000
oper = rc
type_length = fixed
num_blks = 128
rule_options = restore_seeds
no_mallocs = 6
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 21: Reinitializes disk to #003 using same seeds as the previous  -*  
*-            2 stanzas.                                                   -*
*---------------------------------------------------------------------------*
rule_id = RANDWR21
pattern_id = #003
addr_type = random
num_oper = 20000
oper = w
type_length = fixed
num_blks = 128
rule_options = restore_seeds
no_mallocs = 6
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 22: One threads writes to disk while 3 threads are reading from  -*
*-            the same memory buffer that is used to write to the disk.    -*
*---------------------------------------------------------------------------*
rule_id = CACHWR22
pattern_id = #003
addr_type = seq
num_oper = 1000
oper = cawr
max_number_of_threads = 4
type_length = fixed
num_blks = 64
no_mallocs = 6
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 23: Cache - read from disk while 3 threads writing to memory.    -*
*-            1000 operations * 64 blocks/oper = 64000 blocks, Starting    -*
*-            from block 0. WARNING!! This can result in data corruption   -*
*-            on the disk if a disk reassignment occurs while the disk     -*
*-            read is in process. Always follow this stanza with something -*
*-            to clean up the range affected!!!!                           -*
*---------------------------------------------------------------------------*
rule_id = CACHRD23
pattern_id = #003
addr_type = seq
num_oper = 1000
oper = carw
type_length = fixed
max_number_of_threads = 4
num_blks = 64
starting_block = 0
no_mallocs = 6
loop_on_offset = yes

*---------------------------------------------------------------------------*
*- STANZA 24: Clean up aftre the CACHEREA operation. 125 operations * 512  -*
*-            blocks/oper = 64000 blocks, starting from block 0.           -*
*---------------------------------------------------------------------------*
rule_id = CLEAN24
pattern_id = #003
addr_type = seq
num_oper = 125
oper = w
type_length = fixed
num_blks = 512
starting_block = 0
no_mallocs = 1
loop_on_offset = no

