*****************************************************************************************************************
* Assumptions/Considerations while writing this rules file : 
* Band Size = 1MB 
* Block Size = 512 bytes. 
*****************************************************************************************************************
*****************************************************************************************************************
* Testcase Scenario # 1 : 
* Thread SEQWRC1 : Do Sequential IO from LBA 0  to maxBlks/2, proceed from LBA # 0 --> LBA # Maxblks/2  
* Thread SEQWRC2 : Do Sequential IO from LBA maxblks to maxBlks/2, proceed from LBA # Maxblks --> LBA # Maxblks/2 
* Thread SEQWRC3 : Do Sequential IO from LBA maxblks/2 to 0,  proceed from LBA # Maxblks/2 --> LBA # 0 
* Thread SEQWRC4 : Do Sequential IO from maxblks/2 to maxblks, proceed from LBA # Maxblks/2 --> LBA # Maxblks 
*****************************************************************************************************************
rule_id = SEQWRC1
pattern_id = #007 
addr_type = seq
num_oper = 500
oper = w[4]r[10]c
type_length = fixed
starting_block = BOT
max_blkno = 0.5
hotness = 50
num_blks = 2048
direction = up
start_stanza = no

rule_id = SEQWRC2
pattern_id = #007
addr_type = seq
num_oper = 500
oper = w[1]r[5]c
type_length = fixed
starting_block = TOP 
min_blkno = 0.5
hotness = 100
num_blks = 2048
direction = DOWN
start_stanza = no

rule_id = SEQWRC3
pattern_id = #007
addr_type = seq
num_oper = 500
oper = w[4]r[10]c
type_length = fixed
starting_block = MID 
hotness = 50
num_blks = 2048
direction = up
start_stanza = no

rule_id = SEQWRC4
pattern_id = #007
addr_type = seq
num_oper = 500
oper = wrc
type_length = fixed
starting_block = MID
hotness = 500
num_blks = 2048
direction = down
start_stanza = yes

*****************************************************************************************************
* TestCase Scenario 2 : 
* Set of 6 threads in Group :  
* 1. Four threads would do random IO on array, Each thread would do RC and aim at making the data HOT. 
*	1.1. Thread READCMP5 does random ReadCompare of 12 blocks. 
*	1.2. Thread READCMP6 does random ReadCompare of 64 blocks. 
*	1.3. Thread RDWRRDC7 does random Read-Write-ReadCompare of 20 blocks.    
*	1.4. Thread RANDWRC8 does a random Write-ReadCompare of 64 blocks. 
* 2. Two threads would do sequential IO. IO is done on LBA's near band boundary, to make data HOT. 
*	2.1. Thread READCMP9 does a ReadCompare at band boundary, writes 64 blocks on previous band and 64 blocks
*		 on next band. Starts from LBA#0.  
*	2.2. Thread READCMP10 same as READCMP14 but starts from MID of disk, to avoid contentions. 
*****************************************************************************************************

rule_id = READCMP5
pattern_id = #007
addr_type = random
num_oper = 500
oper = w[1]r[5]c
hotness = 100
type_length = random
num_blks = 12
no_mallocs = 4
start_stanza = no

rule_id = READCMP6
pattern_id = #007
addr_type = random
num_oper = 500
oper = w[1]r[10]c
hotness = 50
type_length = fixed
num_blks = 64
no_mallocs = 4
start_stanza = no

rule_id = RDWRRDC7
pattern_id = #007
addr_type = random
num_oper = 500
oper = rwrc
hotness = 200
type_length = random
num_blks = 20
no_mallocs = 4
start_stanza = no

rule_id = RANDWRC8
pattern_id = #007
addr_type = random
num_oper = 500
oper = wrc
type_length = fixed
hotness = 500
num_blks = 64
no_mallocs = 4
start_stanza = no

********************************************************************************
* Next two threads would try to create band crossing scenarios,  
* This thread would seek at Band boundary,  
* Would do IO of 64 blocks at the end of  first band and IO of 64 blocks at  
* the start of second band. Making both the bands HOT simultaneously.   
* In Next num_oper loop jump on to next band boundary. 
********************************************************************************
rule_id = READCMP9
pattern_id = #007
addr_type = seq 
num_oper = 200
oper = wrc
type_length = fixed
hotness = 500
starting_block = 1984 
increment = 2048 
num_blks = 128
no_mallocs = 4
direction = up
start_stanza = no

*****************************************************************************
* Just to avoid collisions, this thread would behave same as READCMP10 except 
* start from MID of disk. 
*****************************************************************************
rule_id = READCMP10
pattern_id = #007
addr_type = seq
num_oper = 200
oper = w[1]r[5]c
type_length = fixed
hotness = 100
starting_block = MID
min_blkno = 3968
increment = 2048
num_blks = 128
no_mallocs = 4
direction = up 
start_stanza = yes

***********************************************************************************************************
* TestCase Scenario 3 :
* Next set of operations run single threaded on disk and one by one.    
* Thread RANDWR11 would randomly select bands, writes with Pattern #5 on disk. May make the band HOT 
*		but ideally would leave RANDRC17 to make the band Hot.   
* Thread RANDRC12 would ReadCompare on same Bands as used in RANDWR16, would ensure the band is made HOT. 
*		ReadCompare is done using pattern 5. 
* Thread RANDWR13 would re-write pattern 3 on bands used in above two stanza's. This would put 
* 		the disk back in known state.  
*****************************************************************************
rule_id = RANDWR11
pattern_id = #005
addr_type = random
num_oper = 2000
oper = w
hotness = 20
type_length = fixed
num_blks = 2048
lba_align = 2048
rule_options = save_seeds
no_mallocs = 6

*****************************************************************************
* Do RC on same set of Bands, written in Stanza RANDWR12. 
* Ensure the Band is Hot, while doing RC.  
*****************************************************************************
rule_id = RANDRC12
pattern_id = #005
addr_type = random
num_oper = 2000
hotness = 500
oper = rc
type_length = fixed
num_blks = 2048
lba_align = 2048
rule_options = restore_seeds
no_mallocs = 6

*******************************************************************************
* Reintialize disk to #003 using same seeds as the previous 2 stanzas 
*******************************************************************************
rule_id = RANDWR13
pattern_id = #007
addr_type = random
num_oper = 2000
oper = w
type_length = fixed
num_blks = 2048
lba_align = 2048
rule_options = restore_seeds
no_mallocs = 6

************************************************************************
**** Last Updated - 14-Nov-2013 By Piyush Sharma-piyusharma@in.ibm.com
