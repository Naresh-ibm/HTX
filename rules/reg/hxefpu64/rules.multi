* This rule file is combination of following rule files :
* fpscr.vsx, vscr, stress, rules.interleaving 
 
* All VSX with FPSCR move to/from interleaved and 100% normal data

rule_id						vfpscr_norm_r1
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30)]


* All VSX with FPSCR move to/from interleaved and 50/50 normal/denormal data

rule_id						vfpscr_n_dn_r2
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30)]


* All VSX with FPSCR move to/from interleaved and 100% denormal data
 
rule_id						vfpscr_denorm_r3
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30)]


* All VSX with FPSCR move to/from interleaved and 100% denormal data

rule_id						vfpscr_all_r4
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30):(0x01000007ffffffff,70)(0x0200000000020000,30)]

* Vscr shifts with 100% normal data

rule_id						vscr_norm_r5
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10)]


* Vscr shifts with 50/50% normal/denormal data

rule_id						vscr_n_dn_r6
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10)]

* Vscr shifts with 100% denormal data

rule_id						vscr_denorm_r7
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10)]

* Vscr shifts with mix data corners

rule_id						vscr_all_r8
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10):(0x0400000000800000,40)(0x0400000000010000,50)(0x0100000400000000,10)]

* XS category instrcution mask details 
* VMX
*  0x0400000000800000 - VMX_VSCR_ONLY (mfvscr, mtvscr - all contained)
*  0x0400000000000018 - VMX_INT_ARITHMETIC_UNSIGNED_ONLY, VMX_INT_ARITHMETIC_SIGNED_ONLY (not everything)
*  0x0400000000008000 - VMX_INT_LOGICAL_ONLY (vand vandc, vor, vnor, vxor - all contained)
*  0x0400000000000600 - VMX_INT_AVERAGE_SIGNED_ONLY, VMX_INT_AVERAGE_UNSIGNED_ONLY (all VMX avg instructions, all contained)
*  0x0400000000206000 - VMX_INT_CMP_UNSIGNED_ONLY, VMX_INT_CMP_SIGNED_ONLY, VMX_FP_CMP_ONLY (all VMX int n fp compare instr, all contained)
*  0x0400000000081800 - VMX_INT_MAX_MIN_SIGNED_ONLY, VMX_INT_MAX_MIN_UNSIGNED_ONLY, VMX_FP_MAX_MIN_ONLY (all VMX int n fp max/min instr, all contained)
*  0x0400000000010000 - VMX_INT_ROTATE_SHIFT_ONLY (all VMX int rotate n shift instr, all contained)
* VSX
*  0x0100000400000000 - VSX_MISC_ONLY (only VSX logica instr, not everything)
*
* (0x0400000000a9fe00, 90 - all contained):(0x0400000000000018,5 - VMX int arith:not everything):(0x0100000400000000,5 - VSX misc:not everything)
*
* Threadwise shift instruction biasing.
* T0-3: XS  (sub-part of integer)

* Stress shifts with 100% normal data

rule_id						stress_norm_r9
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5)]


* Stress shifts with 50/50% normal/denormal data

rule_id						stress_n_dn_r10
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5)]


* Stress shifts with 100% denormal	data

rule_id						stress_denorm_r11
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0,0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5)]


* Stress shifts with mix data corners

rule_id						stress_all_r12
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5):(0x0400000000a9fe00,90)(0x0400000000000018,5)(0x0100000400000000,5)]

* 50% fdiv/fsqrt and 50% simple ops with norm data only.

rule_id				intlvg1_r13
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with de-norm data only.

rule_id				intlvg2_r14
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with norm and de-norm data only.

rule_id				intlvg3_r15
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with ALL data.

rule_id				intlvg4_r16
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with norm data only.

rule_id				intlvg5_r17
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with de-norm data only.

rule_id				intlvg6_r18
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with norm and de-norm data only.

rule_id				intlvg7_r19
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with ALL data categories.

rule_id				intlvg8_r20
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]

