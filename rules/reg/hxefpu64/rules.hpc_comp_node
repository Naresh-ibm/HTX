* Rule file for hxefpu64 exerciser mimicking customer workload for floating point.
* For details of rule keywords, please refer README.hxefpu64
* in /usr/lpp/htx/rules/reg/hxefpu64 dir on test machine.
*
* NOTE: Rule keyword & associated value should be all in one
*	line _only_. Currently '\n' (newline) is used as
*	delimiter to differentiate between keywords.
*
*


* All VSX instructions on all SMT threads with normal data

rule_id						test1
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000007ffffffff, 100):	(0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100)]



* All VSX instructions with 50% normal & 50% denormal data zones

rule_id						test2
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000007ffffffff, 100):	(0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100)]



* All VSX instructions with mixed data zones

rule_id						test3
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000007ffffffff, 100):	(0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100): (0x01000007ffffffff, 100)]


* All BFP instructions on all SMT threads with normal data

rule_id						test4
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100)]


* All BFP instructions with 50% normal & 50% denormal data zones

rule_id						test5
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100)]


* All BFP instructions with mixed data zones

rule_id						test6
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100): (0x020000000007ffff, 100)]


* All VSX & BFP instructions on all SMT threads with normal data

rule_id						test7
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50)]


* All VSX & BFP instructions with 50% normal & 50% denormal data zones

rule_id						test8
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50)]


* All VSX & BFP instructions with mixed data zones

rule_id						test9
num_oper					5000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				1000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50):(0x01000007ffffffff,50)(0x020000000007ffff,50)]
