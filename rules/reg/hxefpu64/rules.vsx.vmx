* Rule file for hxefpu64 exerciser running on P8.
* For details of rule keywords, please refer README.hxefpu64
* in /usr/lpp/htx/rules/reg/hxefpu64 dir on test machine.
*
* NOTE: Rule keyword & associated value should be all in one
*   line _only_. Currently '\n' (newline) is used as
*   delimiter to differentiate between keywords.
*
*


* VMX only. With de-norm data only.

rule_id				rule1
num_oper			500
num_threads			0
seed				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
stream_depth			2000
test_method			2
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
data_bias_mask			[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
ins_bias_mask			[(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100)]


* VMX only. With norm and de-norm data.

rule_id				rule2
num_oper			500
num_threads			0
seed				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
stream_depth			2000
test_method			2
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100):(0x0400000003ffffff,100)]


* VSX only. With norm and de-norm data.

rule_id				rule3
num_oper			500
num_threads			0
seed				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
stream_depth			2000
test_method			2
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100):(0x0100001fffffffff,100)]


* 50% VSX and 50% VMX. With norm and de-norm data.

rule_id				rule4
num_oper			500
num_threads			0
seed				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
stream_depth			2000
test_method			2
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50):(0x0100001fffffffff,50)(0x0400000003ffffff,50)]


* 50% VSX+VMX and 50% rest of all instructions. With norm and de-norm data.

rule_id				rule5
num_oper			500
num_threads			0
seed				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
stream_depth			2000
test_method			2
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25):(0x0100001fffffffff,25)(0x020000000007ffff,25)(0x030000001fffffff,25)(0x0400000003ffffff,25)]

