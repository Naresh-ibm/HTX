* @(#)19	1.6  src/htx/usr/lpp/htx/rules/reg/hxestorage/ssd.buster, exer_storage, htxubuntu 5/12/15 04:48:06 *
* default buster rule file for hxestorage for SSD.
*---------------------------------------------------------------------------*
*- STANZA 1: Sequentially write the entire disk on 1st iteration of the    -*
*-           rule file. This stanza will create 4 threads which will run   -*
*-           in the background while other stanza in the rule are running. -*
*-           Each thread will be covering a different section of the disk. -*
*- Th 1 : Does Sequential IO from LBA 0 to maxblks/4, proceed from LBA #   -*
*-        0 --> LBA # Maxblks/4.                                           -*
*- Th 2 : Does Sequential IO from LBA maxblks/4 to maxBlks/2, proceed from -*
*-        LBA # Maxblks/2 --> LBA # Maxblks/4.                             -*
*- Th 3 : Does Sequential IO from LBA maxblks/2 to 3/4maxblks, proceed from-*
*-        LBA # Maxblks/2 --> LBA # 3/4maxblks.                            -* 
*- Th 4 : Does Sequential IO from maxblks to 3/4maxblks, proceed from LBA  -*
*-        # Maxblks --> LBA # 3/4Maxblks.                                  -*
*---------------------------------------------------------------------------*
rule_id = rule_1
pattern_id = #007
oper = bwrc
num_oper = 0
num_threads = 4
direction = UP DOWN
starting_block = BOT TOP
transfer_size = 256K
num_mallocs = 1
seek_breakup_prcnt = 0
section = yes
skip = -99999999

*---------------------------------------------------------------------------*
*- STANZA 2: Sleep for 2 minutes.                                          -*
*-           This lets the background thread (STANZA 1) initialize an area -*
*-           of the disk before the other rule stanzas start.              -*
*---------------------------------------------------------------------------*
rule_id = rule_2
oper = S
sleep = 120000000
skip = -99999999

*---------------------------------------------------------------------------*
*- STANZA 3: Creates number of threads twice the queue depth. Each thread  -*
*- doing 50000 num_oper with RC operation. Each thread will be picking up  -*
*- one of the transfer size (NAND page size test).                         -*
*---------------------------------------------------------------------------*
rule_id = rule_3
pattern_id = #007
associativity = RROBIN
num_oper = 50000
num_threads = 2qd
seek_breakup_prcnt = 100
oper = RC
transfer_size = 4K 8K 16K 32K 64K 128K 256K
num_mallocs = 2 4 2

*---------------------------------------------------------------------------*
*- STANZA 4: Creates 1QD number of threads doing RWRC/RC/WRC opers with    -*
*- random size small IO transfer. num_mallocs will vary for the threads    -*
*- (small IO transfer test).                                               -*
*---------------------------------------------------------------------------*
rule_id = rule_4
pattern_id = #007
num_threads = 1QD
oper = rwrc rc wrc
num_oper = 20000
transfer_size = [1BLK-128k,-1]
num_mallocs = 4 6 8
seek_breakup_prcnt = 100

*---------------------------------------------------------------------------*
*- STANZA 5: This stanza will create 1QD number of threads, each doing     -*
*- a 80/20 random/seq access ratio. Each thread will be picking up a       -*
*- different transfer size (80/20 random/seq acces ratio test).            -*
*---------------------------------------------------------------------------*
rule_id = rule_5
pattern_id = #007
num_threads = 1QD
oper = rwrc rc wrc
num_oper = 40000
transfer_size = 4K 8K 16K 32K 64K 128K 256K
num_mallocs =  2 4 2
seek_breakup_prcnt = 80

*---------------------------------------------------------------------------*
*- STANZA 6: Creates single thread which does 10000 random writes of       -*
*- pattern #004 with save_seeds flag. Each thread will do IO transfer of   -*
*- random sizes in-between 512bytes-16K.                                   -*
*---------------------------------------------------------------------------*
rule_id = rule_6
pattern_id = #004
oper = w
num_threads = 1
num_oper = 10000
seek_breakup_prcnt = 100
transfer_size = [1BLK-16K,-1]
rule_option = save_seeds
num_mallocs = 10

*---------------------------------------------------------------------------*
*- STANZA 7: Creates single thread which does 10000 random read/compares   -*
*- of pattern #004 on same LBA where previous stanza has done write. Each  -*
*- thread will fo IO transfer of random sizes in-between 1block-16K.       -*
*---------------------------------------------------------------------------*
rule_id = rule_7
pattern_id = #004
oper = rc
num_threads = 1
num_oper = 10000
seek_breakup_prcnt = 100
transfer_size = [1BLK-16K,-1]
rule_option = restore_seeds
num_mallocs = 10

*---------------------------------------------------------------------------*
*- STANZA 8: Reinitializes disk to pattern #007 using same seeds as the    -*
*-           previous 2 stanzas.                                           -*
*---------------------------------------------------------------------------*
rule_id = rule_8
pattern_id = #007
oper = w
num_threads = 1
num_oper = 10000
seek_breakup_prcnt = 100
transfer_size = [1BLK-16K,-1]
rule_option = restore_seeds
num_mallocs = 10

*---------------------------------------------------------------------------*
*- Fron Stanza 9 onwards, all inputs are given by SSD characterization    -*
*- team.                                                                   -*
*---------------------------------------------------------------------------*
*---------------------------------------------------------------------------*
*- STANZA 9: Creates 2qd threads, each doing WRC operation. Half of the    -*
*- threads doing xfer of size 256K and half of size 128K in a SEQ manner.  -*
*---------------------------------------------------------------------------*
rule_id = rule_9
pattern_id = #007
oper = wrc
num_threads = 2qd
num_oper = 20000
seek_breakup_prcnt = 0
transfer_size = 128K 256K
section = yes

*---------------------------------------------------------------------------*
*- STANZA 10: Creates 1qd threads, each doing WRC operation of transfer     -*
*- size 4K in a RANDOM manner.                                             -*
*---------------------------------------------------------------------------*
rule_id = rule_10
pattern_id = #007
oper = wrc
num_threads = 1qd
num_oper = 10000
seek_breakup_prcnt = 100
transfer_size = 4k
section = yes

*---------------------------------------------------------------------------*
*- STANZA 11: Creates 1qd threads, each doing W[3]R[7]C operation of(i.e    -*
*- 30/70 write/read ratio) transfer size 4K with random access.            -*
*---------------------------------------------------------------------------*
rule_id = rule_11
pattern_id = #007
oper = w[3]r[7]c
num_threads = 1qd
num_oper = 10000
seek_breakup_prcnt = 100
transfer_size = 4k
section = yes

*---------------------------------------------------------------------------*
*- STANZA 12: Creates 1qd threads, each doing RANDOM W operation of         -*
*- transfer size between 1BLK to 128K.                                     -*
*---------------------------------------------------------------------------*
rule_id = rule_12
pattern_id = #007
oper = W
num_threads = 1qd
num_oper = 5000
seek_breakup_prcnt = 100
transfer_size = [1BLK-128K,-1]
section = yes

*---------------------------------------------------------------------------*
*- STANZA 13: Creates 1qd threads, each doing RANDOM R operation of        -*
*- transfer size between 1BLK to 128K.                                     -*
*---------------------------------------------------------------------------*
rule_id = rule_13
pattern_id = #007
oper = R
num_threads = 1qd
num_oper = 5000
seek_breakup_prcnt = 100
transfer_size = [1BLK-128K,-1]
section = yes

*---------------------------------------------------------------------------*
*- STANZA 14: Creates 1qd threads, each doing SEQ W operation of transfer  -*
*- size 128K.                                                              -*
*---------------------------------------------------------------------------*
rule_id = rule_14
pattern_id = #007
oper = W
num_threads = 1qd
num_oper = 5000
seek_breakup_prcnt = 0
transfer_size = 128K
section = yes

*---------------------------------------------------------------------------*
*- STANZA 15: Creates 1qd threads, each doing SEQ R operation of transfer  -*
*- size 128K.                                                              -*
*---------------------------------------------------------------------------*
rule_id = rule_15
pattern_id = #007
oper = R
num_threads = 1qd
num_oper = 5000
seek_breakup_prcnt = 0
transfer_size = 128K
section = yes

*---------------------------------------------------------------------------*
*- STANZA 16: One threads writes to disk while 3 threads are reading from   -*
*-           the same memory buffer that is used to write to the disk.     -*
*---------------------------------------------------------------------------*
rule_id = rule_16
pattern_id = #007
num_oper = 1000
oper = cawr carw
num_threads = 2
num_cache_threads = 4
testcase = cache
seek_breakup_prcnt = 0
starting_block = BOT MID
transfer_size = 32BLK
num_mallocs = 6
align = 4096

*---------------------------------------------------------------------------*
*- STANZA 17: Clean up after the CACHE operation. 63 operations * 512      -*
*-            blocks/oper will cover 32000 blocks from BOT/MID.            -*
*---------------------------------------------------------------------------*
rule_id = rule_17
pattern_id = #007
num_oper = 63
oper = w
num_threads = 2
seek_breakup_prcnt = 0
transfer_size = 512BLK
starting_block = BOT MID
num_mallocs = 1