* @(#)48	1.3  src/htx/usr/lpp/htx/rules/reg/hxestorage/rules.app_server, exer_storage, htxubuntu 3/24/15 05:55:13 *
*******************************************************************************
* hxestorage rules file for creating customer like load environment.
* Requirements:
* Application server workload
*
*  50/50: Read/Write ratio
*  sequential write
*  16K-64K(random) : transfer size
*
*
*******************************************************************************

*---------------------------------------------------------------------------*
*- STANZA 1: Sequentially write the entire disk on 1st and every 6th       -*
*-           iteration of the rules file. This stanza will run in the      -*
*-           background while other stanza in the rules file are running.  -*
*-           It will create 0.5 QD of threads, each doing BWRC oper on its -*
*-           own section.                                                  -*
*---------------------------------------------------------------------------*
rule_id = rule_1
pattern_id = #003
num_oper = 0
oper = bwrc
num_threads = 0.5QD
transfer_size = 256K
seek_breakup_prcnt = 0
direction = up down
starting_block = BOT TOP
section = yes
skip = -6

*---------------------------------------------------------------------------*
*- STANZA 2: Sleep for 2 minutes on every 6th iteration of the rules file. -*
*-           This lets the background thread (STANZA 1) initialize an area -*
*-           of the disk before the other rule stanzas start.              -*
*---------------------------------------------------------------------------*
rule_id = rule_2
oper = s
sleep = 30000000
skip = -6

*---------------------------------------------------------------------------*
*- STANZA 3: Creates 0.5QD threads doung W/RC/WRC oper of transfer size    -*
*-           16K to 64K in a SEQ manner.                                   -*
*---------------------------------------------------------------------------*
rule_id = rule_3
pattern_id = #003
num_threads = 0.5QD
num_oper = 50000
transfer_size = [16K-64K,-1]
associativity = SEQ
oper = w rc wrc
seek_breakup_prcnt = 0
direction = up down
starting_block = BOT TOP
num_mallocs = 4 10 8
section = yes

