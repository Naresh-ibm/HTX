* @(#)63	1.4  src/htx/usr/lpp/htx/rules/reg/hxestorage/easytier, exer_storage, htxubuntu 3/28/15 13:59:07 *
************************************************************************************
* Assumptions/Considerations while writing this rules file :
* Band Size = 1MB
* Block Size = 512 bytes.
************************************************************************************

*---------------------------------------------------------------------------*
*- STANZA 1: Sequentially write the entire disk on every 6th iteration of  -*
*-           rulefile. This stanza will run in the background while other  -*
*-            stanza in the rules file are running.                        -*
*---------------------------------------------------------------------------*
rule_id = rule_1
pattern_id = #007
num_threads = 4
num_oper = 0
oper = BWRC
seek_breakup_prcnt = 0
transfer_size = 1MB
direction = UP DOWN
starting_block = BOT TOP 
section = yes
skip = -99999999

*---------------------------------------------------------------------------*
*- STANZA 2: Sleep for 2 minutes.                                          -*
*-           This lets the background thread (STANZA 1) initialize an area -*
*-           of the disk before the other rule stanzas start.              -*
*---------------------------------------------------------------------------*
rule_id = rule_2
oper = S
sleep = 120000000
skip = -99999999

*****************************************************************************************************************
* STANZA 3: Testcase Scenario # 1 :
* Thread 1 : Do Sequential IO from LBA 0  to maxBlks/4, proceed from LBA # 0 --> LBA # Maxblks/4
* Thread 2 : Do Sequential IO from LBA maxblks/4 to maxBlks/2, proceed from LBA # Maxblks/2 --> LBA # Maxblks/4
* Thread 3 : Do Sequential IO from LBA maxblks/2 to 3/4maxblks,  proceed from LBA # Maxblks/2 --> LBA # 3/4maxblks 
* Thread 4 : Do Sequential IO from 3/4maxblks to maxblks, proceed from LBA # Maxblks --> LBA #3/4 Maxblks
*****************************************************************************************************************
rule_id = rule_3
pattern_id = #007
num_threads = 4
num_oper = 500
oper = RC
seek_breakup_prcnt = 0
transfer_size = 1MB
direction = UP DOWN
starting_block = BOT TOP 
hotness = 500
section = yes

*****************************************************************************************************
* STANZA 4: TestCase Scenario 2 :
* Set of 6 threads in Group :
* 1. Four threads would do random IO on array, Each thread would do RC and aim at making the data HOT.
*   1.1. Thread 1 does random RC of size between 1 block to 20 blocks.
*   1.2. Thread 2 does random RC of 64 blocks.
*   1.3. Thread 4 does random RC of size between 1 block to 20 blocks.
*   1.4. Thread 5 does a random RC of 64 blocks.
* 2. Two threads would do sequential IO. IO is done on LBA's near band boundary, to make data HOT.
*   2.1. Thread 3 does a ReadCompare at band boundary, writes 64 blocks on previous band and 64 blocks
*        on next band. Starts from LBA#0.
*   2.2. Thread 6 same as thread 3, but starts from MID of disk, to avoid contentions.
*****************************************************************************************************
rule_id = rule_4
pattern_id = #007
num_threads = 6
oper = rc
num_oper = 500
transfer_size = [1BLK-20BLK,-1] 64BLK 128BLK 
seek_breakup_prcnt = 100 100 0 
hotness = 500 
num_mallocs = 4 
blk_hop = 0 0 2048 
starting_block = 0 0 0 0 0 MID

***********************************************************************************************************
* STANZA 5: TestCase Scenario 3 :
* Next set of operations run single threaded on disk and one by one.
* rule_5 would randomly select bands, writes with Pattern #5 on disk. May make the band HOT
*       but ideally would leave rule_6 to make the band Hot.
* rule_6 would ReadCompare on same Bands as used in rule_3, would ensure the band is made HOT.
*       ReadCompare is done using pattern 5.
* rule_7 would re-write pattern 3 on bands used in above two stanza's. This would put
*       the disk back in known state.
**********************************************************************************************************
rule_id = rule_5
pattern_id = #005
oper = w
num_threads = 1
num_oper = 2000
seek_breakup_prcnt = 100
transfer_size = 1MB
lba_align = 2048
rule_option = save_seeds
hotness = 20
num_mallocs = 6


*****************************************************************************
* Do RC on same set of Bands, written in Stanza rule_5.
* Ensure the Band is Hot, while doing RC.
*****************************************************************************
rule_id = rule_6
pattern_id = #005
oper = rc
num_threads = 1
num_oper = 2000
seek_breakup_prcnt = 100
transfer_size = 1MB
lba_align = 2048
rule_option = restore_seeds
hotness = 500
num_mallocs = 6

*******************************************************************************
* Reinitialize disk to #007 using same seeds as the previous 2 stanzas
*******************************************************************************
rule_id = rule_7
pattern_id = #007
oper = w
num_threads = 1
num_oper = 2000
seek_breakup_prcnt = 100
transfer_size = 1MB
lba_align = 2048
rule_option = restore_seeds
num_mallocs = 6
