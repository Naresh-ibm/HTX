README for HTX Network Exerciser
=================================

Last updated:
-------------
15th March, 2011 by Piyush Sharma


Table of contents:
================================================================================
1)  Goal
2)  Salient Features
3)  Hardware supported & HW test scope
4)  Supported OS
5)  General info
6)  Setup and Prerequisites
7)  MDT and Rules file created 
8)  Brief Description of hxecom exerciser
    8.1) Role of different processes 
    8.2) Writer process pseudo code
    8.3) Reader process pseudo code
    8.4) Underlying protocols supported
9)  Exerciser specific Log files
10) KDB Analysis.
11) Sample Rule Stanza and Explanation
12) Understanding htxstats
13) Throughput numbers
14) Frequently Asked Questions
15) Contact Information


================================================================================

1) Goal :
---------
Hxecom is intended to be a high stress exerciser with data integrity checks for 
testing network adapters in HTX environment. The objective is to fully utilize 
the bandwidth available on the network adapter and on the physical transmission 
medium. 

2) Salient Features :
---------------------
1) Hxecom supports testing of adapters on single/multiple systems network
   configuration.
2) Hxecom supports TCP/IP, IPoIB, RDMA packet types.
3) Hxecom supports incremental/random packet sizes.
4) Automatic spawning and configuration of reader/writer process as implied by 
   rules file. Supports sending/receiving data through multiple threads for an 
   network interface under test.
5) Robust recovery and identification of errors.
6) Supports intelligent patterns to isolate the failures.
7) Interoperability amongst different O.S. levels. 
 

3) Hardware Supported & HW Test Scope :
---------------------------------------
Hxecom can be configured to run between all network interfaces that supports 
TCP/IP, RDMA protocol. Supports any adapters for which device driver or
appropriate packages are installed.


4) Supported OS :
-----------------
AIX: y
Linux: y 
BML: y

5). General Info : 
------------------
Hxecom is a multi-process, socket based user space program that performs data integrity 
tests (send/receive/compare) on device under test. Working of this exerciser 
can be divided into 3 phases, each of which is described below :

5.1) Setup phase:  build_net script is used to setup various test network interfaces on each 
	host machine. Appropriate rules file and the mdt files are also created depending 
	on the network configuration defined in "bpt" configuration file.
	
5.2) Discovery phase: In this phase, hxecom reads rules file and creates server processes.
	Each server process does a broadcast on sub-net and listens for new connection 
	at specific port. As a result of hand-shaking each server process has information 
	about its remote parties. Finally server process forks reader/writer processes on 
	all Ethernet adapters as specified in 'bpt' file. 
	
	
5.3) Test phase:  In this phase hxecom reader/writer process connects to each other,( they 
	may be running on same or remote hosts), exchange control information about the testcase
	and start sending/receiving/comparing data over the test-network.
	


6) Setup & Prerequisites : 
--------------------------
Hxecom users must setup the test network appropriately before starting test.
Please refer to link 
	http://ausgsa.ibm.com/projects/h/htx/public_html/Docs/build_net_procedure.txt 
for detailed description on exerciser setup procedure. 
Hxecom RDMA testcase requires users to pre-install the required packages. 
1. For AIX : udapl.rte package should be installed. 
2. For Linux : OFED and DAPL packages should be instaled.
Above pacages can be found on NIM. 

7) Mdt and Rules File created : 
--------------------------------

On successful completion of setup phase(Section 6), build_net script creates the 
Master Device Table (M.D.T) file in /usr/lpp/htx/mdt/ directory. The standard mdt
file created by build_net is named as "net.mdt". This file contains entry for 
all the Ethernet adapters under test. 
If users wants to run hxecom exerciser along with other HTX exercisers, 
"mdt_net" script present in "/usr/lpp/htx/mdt/" directory, should be used.
	
Usage of mdt_net script :
	/usr/lpp/htx/mdt/mdt_net user.mdt.
	
This script would append hxecom stanzas to the mdt file specified by user.mdt. 
User should ensure that user.mdt already exists in "/usr/lpp/htx/mdt" directory. 
	
Additionally, build_net script creates rules file for each stanza entry in net.mdt
file, hxecom rules file can be found in "/usr/lpp/htx/rules/reg/hxecom/" directory. 
Hxecom rules file are named according to test network hostnames. If user wants to 
edit the already created rules file, "fixrules" script present in "/usr/bin/" 
directory, should be used. This script is interactive and changes made by user 
are reflected in all the rules file.
	
8) Brief Description of Hxecom Exerciser: 
-----------------------------------------

This section provides brief description of exerciser's design and its 
functionality. This section is intended for Advanced users, Test Architect and 
HTX  developers.
	
HTX Supervisor process spawns hxecom server process for each ethernet device entry  
present in mdt selected. Hence it is possible to concurrently exercise all ethernet
adapter of the system. Each hxecom server process in turn forks several other processes 
for its operation. Brief description for each of the processes is provided in section
below : 
	
8.1) Role of different processes
---------------------------------
Different processes and their functionality that makes hxecom exerciser :  
		
a) Hxecom Server:  When the exerciser is spawned, the main process becomes the
	server process. Server process spawns other hxecom process (described
	below) and services requests coming to it. One server process is dedicated to 
	each interface on the host and it uses the communication channel for servicing 
	requests.	
	
b) Coordinator process: This is spawned by hxecom main server. Its main task is to keep
	track of new hxecom and coordinator process created on subnet. Coordinator
	process exchanges information about this Server to all other remote Server and
	also informs its Server the availability of new Server process. 
	One coordinator is dedicated for one test network. It uses the communication channel 
	for sending and receiving host information. It listens on predefined port 
	depending on the test network id, so that all the coordinators can communicate .
			
c) Writers process:  These are spawned by Remote hxecom Server servicing the request from 
	local Server process. This process first get the test-case information from its 
	invoking Server process and initiate request for its reader on Remote Server. 
	Once the reader is spawned on the other end, writer/reader process exchange control 
	information on testcase setup. It uses the communication channel to get 
	the required control information and uses the test network to send data to reader. 
	Number of writers process spawned can be controlled from the rules file. 
	
d) Readers:  These are spawned on request from the writer on the Remote Server. Each reader
	process has a dedicated copy of writer on remote host. Since same local pattern, 
	rules and configuration information is used by remote writer, reader can easily 
	communicate with the remote writer. Reader receives the packet sent by the writer 
	and compares them for data integrity. Any difference in the data received is 
	identified and a miscompare error is reported.
		
e) Comsem:  This process is used by reader process to reset/restart/halt/exit writer 
	process.This process is particularly useful in case of UDP packet to sync up and
	acknowledge packet transmission at the user level. 
	

8.2) Writer process pseudo code:
-------------------------------- 	

The algorithm below provides a broad picture on working of writer process and helps in
understanding the correlation between rules file parameters and exerciser working. 
This is an abstracted view, not the actual exerciser implementation, for in-depth details 
on each steps, look at the source. 

	
	send_buffer = malloc(rule[stanza].bufmax); 
	Overlay sendbuffer with rule[0]. pattern. 
	
	for(stanza=0; stanza<NumberOfStanzas; stanza++) {
	    bcnt_max = ((rule[stanza].bufmax - rule[stanza].bufmin ) / rule[stanza].bufinc);
	    if(bcnt_max == 0 )
               	bcnt_max = 1 ;
	    for(bcnt = 0; bcnt < bcnt_max; bcnt++) {
	    	if(rule[stanza].bufinc ==  -1 ) {
	    		for(i = 0; i < rule[stanza].num_oper; i ++) { 
	    			#generate random packet sizes
	    			bsize[i] == random pkt sizes; #  b/w rule[stanza].buf_max and rule[stanza].bufmin
	    		}	
	    	} else { 
	    		for(i = 0; i < rule[stanza].num_oper; i ++) {
			     bsize[i] = rule[stanza].bufmin + bcnt * rule[stanza].bufinc ;
			}
		}	
	        for(i=0; i< rule[stanza].num_oper; i++) {
        	    if( !TCP ) {
	                while(Unacknowledge packets == rule[stanza].write_ahead)
	                    sleep
	            }
	            if(rule[stanza].debug_pattern) { 
	            	Overlay send buffer with debug information 
	            	every 128 bytes. 
	            } 	
	            
	            set alarm for rule[stanza].IO_ALARM_TIME
	            send(test_socket, send_buffer) # send buffer is of size bsize[i] bytes. 
	            clear alarm
	            if(error) { 
	                Print/Update.
	                exit
	            } 
	            if(rule[stanza].write_sleep) { 
	            	sleep(rule[stanza].write_sleep in milliseconds)
	            }	
	        }
	        Print/Update stats
	    }
	}
		
8.3) Reader process pseudo code: 
---------------------------------	
The algorithm below provides a broad picture on working of reader process and helps in
understanding the correlation between rules file parameters and exerciser working. 
This is an abstracted view, not the exact exerciser implementation, for in-depth details 
on each step, look at the source. 

	buflen = pattern_max + 2 * (TP_HDR_LEN); # pattern_max is maximum  
						 # amongst rule[stanza].bufmax values.
	expected_buffer = malloc(buflen); 
	Overlay expected_buffer with rule[stanza].pattern
	recv_buffer = malloc(buflen); 

	for(stanza=0; stanza<NumberOfStanzas; stanza++) {
	    cnt_max = ((rule[stanza].bufmax - rule[stanza].bufmin ) / rule[stanza].bufinc);
	    		    if(bcnt_max == 0 )
	                    	bcnt_max = 1 ;
	    for(bcnt = 0; bcnt < bcnt_max; bcnt++) {
	    	if(rule[stanza].bufinc == -1 ) { 
	    		#Writer process should have genrated random pkt sizes. 
	    		#Get them. 
	    		for(i = 0; i < rule[stanza].num_oper; i ++) {
	    			bsize[i] = random pkt sizes for writer. 
	    		}	
	    	} else { 
	    	 	for(i = 0; i < rule[stanza].num_oper; i ++) {
			     bsize[i] = rule[stanza].bufmin + bcnt * rule[stanza].bufinc ;
			}
		}	
	        for(i=0; i< rule[stanza].num_oper; i++) {
	            if(rule[stanza].debug_pattern) { 
	 		# Overlay expected_buffer with debug patterns. 
	 	    }			
	            set alarm for rule[stanza].IO_ALARM_TIME
	            recv(test_sockek, recv_buffer, bsize[i]); 
	            clear alarm
	            memcmp(recv_buffer, expected_buffer, bsize[i]); 
	            if(error) { 
	            	Update stats.
	            	Flag errors.
	            	Exit; 
	            }	
	            
	            if( !TCP && (rule[stanza].write_ahead - packets_since_ack
	                                                  <= rule[stanza].ack_trig)) { 
	                Acknowledge packet(s)
	            }    
	        }     	        }
	        Print/Update stats
	    }
	}
 		
8.4) Underlying protocol Supported:
----------------------------------- 	

 If TCP/IP is used as the test protocol, the writer writes as fast as allowed since this 
 protocol is reliable. However, when a UDP/IP is used, a method to limit the overrun is 
 needed .The rule file parameter WRITE_AHEAD serves this purpose. The total outstanding 
 packets can be no greater than the number specified by the WRITE_AHEAD parameter. This 
 parameter when combined with other network parameters can be used to detect abnormal 
 data discards. UDP/IP testing should only be performed by testers willing to invest the 
 time required to understand the interaction between network parameters.
   		
 		
9)  Exerciser Log files
---------------------------

1. /tmp/htxmsg : This file contains informational message about each hxecom exerciser.
2. /tmp/htxerr : If hxecom reports an error, error report is dumped in this file. 
3. /tmp/saveprof : This serves as a backup of currently active  bpt configuration file. 
		This file is used internally by many other scripts, users shouldn't modify 
		this script.
4. /tmp/other_ids : In case of multi system test this file keeps track all ip address of 
		all participating hosts.
5. /tmp/htxstats : This file contains information about number of good/bad reads/writes,
		amount of good/bad bytes transferred across the network. 
6. /tmp/htxstats2: More detailed good/bad read/writes per stanza is dumped in this file. 
7. /tmp/comstats : Coordinator process specific errors/stats.

10) Hxecom KDB Dumps: 
----------------------
In case of Miscompare and subject to rules parameter SHUTDOWN_FLAG, hxecom can trap to 
KDB in case of miscompare.  
Register contents as displayed in KDB are as follows :
r3 = 0xBEEFDEAD
r4 = start address to expected data
r5 = start address to actual data 
r6 = index where miscompare started 
r7 = address of HTX data structure 
r8 = address of rules file data structure
r9 = address of Buffer size 
r10  = Currently running hxecom version.

In case of miscompare and subject to rules parameter SHUTDOWN_FLAG value hxecom will dump 
the rbuf and wbuf files to htxent* in "/tmp/" directory.


11. Hxecom scripts 
-------------------
1. build_net : Used for configuring test networks. 
2. clean_net : Used to clean up the current network setup. 
3. fixrules  : Used to change all or few hxecom rules parameter.
4. mdt_net   : Used to append hxecom's default mdt( net.mdt) to any user mdt of user's 
		choice. 
5. pingum    : Used to verify whether all the hxecom networks are able to ping or not. 
		It is advisable to run this script after all the network setup had been 
		completed using build_net. 
	   

12. Sample Rule Stanza with Explanation : 
---------------------------------------
Hxecom rules file are located in directory : /usr/lpp/htx/rules/reg/hxecom/ on test 
machines. Rules file is created as part of initial setup done using build_net script. 
Most of the rules file parameters are automatically filled up depending upon user 
specified test-case details. All rules file tweaks should be done after setting up the 
test networks. Any changes done to existing rules file will take effect in next HTX run.


Sample Hxecom Rules file : 
--------------------------
RULE_ID=00000000
PATTERN_ID=HEX255
COMNET_NAME=comnetXX
TESTNET_NAME=testnetXX
BUFMIN=5000
BUFMAX=5000
BUFINC=1
MASTER=Y
LAYER=TCP
IO_ALARM_TIME=300
SHUTDOWN_FLAGS=0x0000
WRITE_SLEEP=0
REPLICATES=1
NUM_OPER=1000

BUFMIN=100
BUFMAX=1000
BUFINC=100
NUM_OPER=100


Hxecom rules file parameters can be divided into two types depending upon their effect
in exerciser : 
1. First Stanza only : These parameters should be only specified in first stanza. 
	These parameters are mostly related to initial hxecom testcase setup. If multiple
	instances of these parameters are found in rules file then hxecom would report a 
	rules error or may lead to unexpected results. These rules file parameters are : 
	PATTERN_ID, COMNET_NAME, TESTNET_NAME, LAYER, COM_STREAM_PORT, COM_DGRAM_PORT, 
	REPLICATES, BUFSEED, SHUTDOWN_FLAGS, MASTER, OPER, ONESYS.
		       
2. Not Stanza specific: These parameters can be altered per stanza. These are mostly 
	testcase specific parameters. These parameters are : BUFMAX,BUFMIN,BUFINC, NUM_OPER,
	ACK_TRIG, WRITE_AHEAD, DEBUG_PATTERN, NO_COMPARE, WRITE_SLEEP, IO_ALARM_TIME.
			
Brief description of each Rules file parameter :
------------------------------------------------

1)RULE_ID   : 	This parameter is used to assign unique name to each of the rule stanza
		in the rule file. The value should be of type character string with a 
		maximum size of 8 bytes.
             	
   		Default - 00000000.

2)PATTERN_ID :  This parameter specifies the bit pattern to be used for read/write on for
		pattern file. Hxecom uses a custom pattern called as  BUILD_NET which is a 
		combination of HEX255,HEXAA, HEXFF and HEX55 patterns.
		
		Default - BUILDNET.

3)COMNET_NAME : This parameter is used for identification of network used for coordination.
 		This must be a class A network configured for TCP/IP.  The name
 		entered here must be in the /etc/hosts file and refer to a valid
 		IP address.  The device represented by this address must not be
 		in the mdt file. This is a mandatory field in rules file.  
 		
 		DEFAULT -- NO

4)TESTNET_NAME :This parameter is used for identification of network under test.  This must
		be a name that exists in /etc/hosts and represent a valid Class C IP
		address.  The device represented by this address must be in the
		mdt file. This is a mandatory field in rules file. 
		
		DEFAULT - NO.

5)COM_STREAM_PORT : Specifies the socket used for TCP/IP socket connection between different
		hxecom server processes. 
		
		Default - 5100. 
		
6)COM_DGRAM_PORT : Specifies the socket used for UDP connection between comsem process. 

		Default - 5101

7)REPLICATES :  This parameter controls the number of reader/writer pair for a particular
		test network. This parameter can be used to control the stress level required 
		for a particular test network.
		
		Possible Values - Whole numbers.
		Default - 1.
		Maximum - 50

8)MASTER : 	This parameter is used to control which all remote hxecom server process 
		qualifies to form a connection with this server process.  At least 1 of the 
		nodes forming a connection must be a master.  This is used to cause slaves to 
		connect to a master node without having the slaves form connections between 
		each other.
		
             	S-M-S    vs.   M-M
                  |            |X|
                  S            M-M
                  
		Possible values -  Y or N. 
		Default - Y.

9) OPER	 :   	This parameter specifies if this server process is allowed to read, write, or
		read-and-write. Valid string values are R, W, RW, or WR.  RW and WR
		are equivalent. This parameter can be used to drive one way traffic on a 
		test network.  
		
		Default values : 
			 "W" if MASTER=N, and 
			 "RW" if MASTER=Y.
		

10) LAYER : 	This parameter specifies the underlying protocol to be used for test network. 
		Possible values TCP or UDP or RDMA.
		When specifying UDP, WRITE_AHEAD value is critical.  
		
		Default - TCP.

11. SHUTDOWN_FLAGS : This parameter will be used to shutdown all network activity when
		a specific error(s) has been detected.  This will aid in locating
		packets on the network analyzer and isolating transmit from receive
		problems.  This number is always specified in
		hexadecimal format.  The 0x is optional. The following are flags
		that can be specified individually or cumulatively:
		
  		- 0x0fff  Halt on any error.
  		- 0x0001  Halt on miscompare.  err=00e3xxxx
  		- 0x0002  Halt when exceed IO_ALARM_TIME in a read. err=00daxxxx
  		- 0x0004  Halt on unknown interrupt. err=00dbxxxx
  		- 0x0008  Halt on timestamp error. err=00dexxxx
  		- 0x0010  Halt if received packet is wrong length. err=00dfxxxx
  		- 0x0020  Halt if packet dropped (Transmitted but not received). err=00e1xxxx
  		- 0x0040  Halt if receive a duplicate or out-of-sequence packet. err=00e0xxxx
  		- 0x0080  Halt if receive unidentified packet (not above errors).err=00e2xxxx
  		- 0x0100  Halt if data header fields violate construction rules. err=00ddxxxx
  		- 0x0200  Halt if write thread receives a SIGPIPE. err=00ebxxxx
  		- 0x0400  Halt if write OTHER error
  		- 0x1000  CRASH TO KDB ON MISCOMPARE
  		- 0x2000  send Attention ON MISCOMPARE
  		- 0x4000  Crash on any error
  		
 		Default - 0x1ffff
 	
Rules file parameters described below can be changed in each stanzas in rules file.

12) BUFMIN  :	This parameter controls the minimum packet size that should be transferred 
		over the network. This varies with stress level specified in bpt file. 
		
		Default - 30000 

13) BUFMAX  :   This parameter controls the maximum packet size that should be transferred 
		over the network. This parameter varies with stress level specified in bpt
		file. 
		
		Default - 65000. 
		
14) BUFINC  : 	This parameter controls the packet sizes to be used in next num_oper run. 
		Possible Values = -1 Generate random packet sizes between BUFMIN and BUFMAX.
				= 0  packet size is fixed and equal to BUFMAX.
				> 0 Increment packet size with BUFINC after each iteration of 
				NUM_OPER. 
		
		Default - Depends on stress_level parameter in bpt file. 
		
15) NUM_OPER :	This parameter indicates number of times the read/write to be performed before
		changing the packet size. Input should be positive real number.
		
		Default - 10000
		
16) ONESYS : 	This parameter states what kind of network setup has been done. Possible values 
		are 1 and 0. When set to 1 this implies you are running single system network 
		test and vice-versa. 
		
		Default - Depends on onesys parameter in bpt file. 
		
17)WRITE_SLEEP :This parameter allows lowering the stress level by specifying sleep
		time in milliseconds.  It will also balance the work-load between
		fast and slow machines.  
		
		Default - 0.
		
18)WRITE_AHEAD :This parameter specifies how many packets can be written ahead of the
		read process without acknowledgements. Size of the write ahead value for 
		TCP is ignored.
		For UDP, the value of WRITE_AHEAD, buffer size(BUFMIN, BUFMAX, and
		BUFINC), and network parameters interact to determine behavior.
		See SC23-2365-01, "Performance Monitoring and Tuning Guide," for
		information on how to setup.  Network option arpt_killc should be
		set to a large value to prevent dropping packets every 20 minutes.

		Default - 2 for UDP

19)ACK_TRIG :   This parameter specifies how many of the test packets to acknowledged.
		With a heavy load, a machine can become bound by the number of
		interrupts that it can service.  Using a low ACK_TRIG value will
		alleviate this problem except for very small packets.  The default
		is to ack all test packets.  ACK_TRIG=0 specifies to ack only the
		last packet in the WRITE_AHEAD sequence (0 left to write).  If you
		are using a fairly reliable comnet then this will work.  If it is
		not then there will be some timeouts related to dropping packets on
		the comnet.  These can be identified by looking at the error messages
		printed.

20)DEBUG_PATTERN: This parameter specifies whether debug patterns should be included in 
		packet used for send/receive. This parameter is particularly useful while
		debugging hxecom miscompare. 
		
		Default = 1(Enabled)
		

13. Understanding htxstats 
---------------------------
Hxecom dumps stats information in two different files in /tmp/ directory: 
1.  /tmp/htxstats in standard HTX format. This stats is an aggregate of all the packets 
   send/received through this interface.This looks like : 

ent4:
  cycles                              =                  0
  # good reads                        =              100000   <-- Number of good packet read
  # bytes read                        =         3001200000    <-- Number of good bytes read
  # good writes                       =              100000   <-- Number of good packets written 
  # total instructions                =                  0    
  # bytes written                     =         3001200000    <-- Number of good bytes written  
  # good others                       =                  0
  # bad others                        =                  0
  # bad reads                         =                  0
  # bad writes                        =                  0
  # data transfer rate(bytes_wrtn/s)  =        50867796.00    <-- bytes written per second
  # data transfer rate(bytes_read/s)  =        50867796.00    <-- bytes read per second. 
  # instruction throughput(MIPS)      =           0.000000


2. /tmp/htxstats2 file, where data read/written on each connection per stanza is dumped. 
Please Note : See rules parameter REPLICATES to control number of connections made. 

W(100.1.2.218.32931) connected to R(100.1.2.16.32934)
STANZA 0
good writes        =             205002        <-- Good packets read
bad writes         =                  0
good others        =                  0
bad others         =                  0
bad bytes written  =                  0
good bytes written =         1820761308        <--- Good bytes written.

STANZA 1
good writes        =             524960
bad writes         =                  0
good others        =                  0
bad others         =                  0
bad bytes written  =                  0
good bytes written =          396869760


14. Frequently Asked Questions 
-------------------------------
Please refer to following link : 
http://ausgsa.ibm.com/projects/h/htx/public_html/Docs/FAQs.html#hxecom


15. Contact Inforamtion :
------------------------
Please refer Maintainers.txt file in HTX TOPDIR. 
