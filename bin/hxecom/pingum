#!/bin/perl

$prof_file = $ENV{"HTX_LOG_DIR"}."/saveprof";    #this is build_net profile created when you
                                    # run build_net..
unless (open (PROF_FILE,"$prof_file")) {
    print("Can't open $prof_file file!\n");
    exit(1);
}
@lines = <PROF_FILE>;
close(PROF_FILE);

$res = `uname -r`;
chomp($res);
$len = length($res);
if($len > 4) {
    $linux="yes";
}
$debug="";

$in_net_section="";
$myname = `hostname`;
chomp($myname);
$myip = &mygetip($myname);
($nib1,$nib2,$nib3,$mylastnib)=split(/\./,$myip);

$classB="no"; 

$com_iface=`ip addr show to $myip | awk -F : ' /eth[0-9]/ || /net[0-9]/ || /en/ { print \$2}'`;
chomp($com_iface);
$com_iface=trim($com_iface);
$res = `ip -4 addr show dev $com_iface | awk '/inet/ {print \$2}' | cut -d / -f 2`;
chomp($res);
$res=trim($res);
if($res == 16) { # Class B
    $classB="yes";
}

@onesys_array="";
$netcnt=0;
$onesys="";
@full_other="";
@other_ids="";
@gotnets="";
$gotnets_cnt=0;
@comids="";
#print("Gathering info about all the systems and networks in this test. Please be Patient\n");
foreach $line (@lines) {
	if($line =~ /onesys=y/i) {
		$onesys="yes";
	}
}
$KERNEL_26 = "";
$res = `uname -r`;
@un = "";
@un = split(/\./,$res);
if($un[0] == 2 && $un[1] == 6)
{
    $KERNEL_26 = "yes";
}


foreach $line (@lines) {
	if($line =~ /thishostid=/i) {
		$ids = get_value($line);
		print("Found thishostid with value $ids \n") if($debug); 
		$thisid=$ids;
		if($thisid ne $mylastnib) { 
			print("Class B n/w configured, thisid=$thisid, mylastnib=$mylastnib \n"); 
			$mylastnib=$thisid; 
		}
	}
	if($line =~ /nexthostid=/i) {
        $ids = get_value($line);
        print("Found nexthostid with value $ids \n") if($debug);
        $nextid=$ids;
    } 
}
foreach $line (@lines) {
	if($line =~ /other_ids/) {  
		$ids = get_value($line);
		print(" Found other_ids with value $ids \n") if($debug); 
		@tmp=split(/:/,$ids);
		$count=0;
		foreach $item (@tmp) {
			if($item =~ /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/) {
				if($classB =~ /yes/) { 
					($nib1,$nib2,$nib3,$nib4)=split(/\./,$item);
					$lastnib = $nib3.".".$nib4; 
				} else { 
					($nib1,$nib2,$nib3,$lastnib)=split(/\./,$item);
				}
			} else {
				$lastnib=$item;
			}
			print("lastnib=$lastnib, classB=$classB, mylastnib=$mylastnib \n") if($debug); 
			if($mylastnib ne $lastnib) {                
				if($onesys) {
					$other_ids[$count]=16;
				} else {
					$other_ids[$count]=$lastnib;
					print("lastnib=$lastnib, classB=$classB, other_ids=$other_ids[$count] \n") if($debug); 
				}
				++$count;
			} elsif ($onesys) {
				$other_ids[$count]=16;
			}
		}
		if($line =~ /other_ids/) {
			@comids = @tmp;
		}
	}
} 
foreach $line (@lines) {

	if($line =~ /^tm/ || $line =~ /^bond/ || $line =~ /^eth/ || $line =~ /^ent/ || $line =~ /^ib/ || $line =~ /^en/) {

		($dev,$net,$junk)=split(/ +/,$line);
		if($net !~ /com/i && $net !~ /n/i && $line !~ /delete_router/) {
			if($onesys) {
				if($onesys_array[$net]) {
					$onesys_array[$net] = "$onesys_array[$net]" . " $dev";
					print("onesys_array for netid=$net = $onesys_array[$net] \n") if($debug); 
				} else {
					$onesys_array[$net] = "$dev";
				}
			} else {
				$fcnt=0;
				foreach $id (@other_ids) {
					print("Found $net,  id = $id\n") if($debug);
					$networks[$netcnt]="$net" . "net" . "$id" . "- $dev";
					print("netcnt=$netcnt, networks=$networks[$netcnt] \n") if($debug); 
					++$netcnt;
				}
			}
		}
	}
}


#now for each network try ping;
#make sure network pings.
$netcnt=0;
$allok="yes";
if($onesys) {
	$net=0;
	foreach $item (@onesys_array) {
		if($item) {
			($dev1,$dev2)=split(/\s+/,$item);
			if($linux) {
				if($KERNEL_26) { 
					$ip = "$net" . ".1.1.2"; 
				} else { 
					if($classB =~ /yes/){
						$ip = "$net" . ".1.".$nextid;
					}
					else{
						$ip = "$net" . ".1.1." . "$nextid"; 
					}
				}
				print("Ping network $ip from dev $dev2---->");
				if(!&ping_up_host($ip,$dev2)) {
					print("Ping failed on $dev2 $ip!\n");
					$allok="";
				} else {
					print("OK\n"); 	
				}
				if($KERNEL_26) {
					$ip = "$net" . ".1.2.2"; 
				} else {
					if($classB =~ /yes/){
						$ip = "$net" . ".2.".$thisid;
					}
					else{
						$ip = "$net" . ".1.2.".$thisid;
					}
				}
				print("Ping network $ip from dev $dev1---->");
				if(!&ping_up_host($ip,$dev1)) {
					print("Ping failed on $dev1 $ip!\n");
					$allok="";
				} else {
					print("OK\n"); 	
				}
			} else {
				$ip = "$net" . ".1.2.$next_host_number";
				print("Ping network $ip---->");
				if(!&ping_up_host($ip)) {
					print("Ping failed on $dev2 $ip!\n");
					$allok="";
				} 
				if(!&ping_up_host($ip)) {
					print("Ping failed on $dev1 $ip!\n");
					$allok="";
				} else {
					print("OK\n"); 	
				}
				$ip = "$net" . ".1.2.$thisid";
				print("Ping network $ip---->");
				if(!&ping_up_host($ip)) {
					print("Ping failed on $dev2 $ip!\n");
					$allok="";
				}
				if(!&ping_up_host($ip)) {
					print("Ping failed on $dev2 $ip!\n");
					$allok="";
				} else {
					print("OK\n"); 	
				}
			}
		}
		++$net;
	}
} else {
	foreach $network (@comids) {
		($ip,$dev)=split(/-/,$network);
		print("Ping Com $ip---->");
		if(!&ping_up_host($ip)) {
			print("Ping failed on COM network $dev $ip!\n");
			$allok="";
		} else {
			print("OK\n"); 	
		}
	}
	foreach $network (@networks) {
		($ip,$dev)=split(/-/,$network);
		print("Ping Test $ip---->");
		if(!&ping_up_host($ip)) {
			print("Ping failed on $dev!\n");
			$allok="";
		} else {
			print("OK\n"); 	
		}
		++$netcnt;
	}
}

if($allok) {
	print("All networks ping Ok\n");
	exit(0);
} else {
	print("Some network(s) did not ping\n");
	exit(-1);
}


sub is_unique {
	local($net)=@_;
	local($item,$match);
	$match="";
	foreach $item (@gotnets) {
		if($item == $net) {
			$match="yes";
		}
	}
	if($match) {
		return(0);
	} else {
		$gotnets[$gotnets_cnt++]=$net;	
	}
	return(1);
}

sub ping_up_host {

    local($host,$dev)=@_;
    $retry = 0;
    $sleep_interval = 2;

    while($retry < 5)
    {
		$res = ping_up($host,$dev);
		if($res eq "yes") {
			return "yes";
		}
		else {
			print("\nPinging host $host failed. $retry Retrying...") if($debug);
			$retry++;
		}
	}
	return("");
}

sub ping_up {
    local($host,$dev)=@_;
    #see if the server is up..

	if($dev) {
		print("Running ... ping -c1 -w1 $host -I $dev \n") if($debug); 
		$res = `ping -c1 -w1 $host -I $dev`;
	} else {
		print("Running ... ping -c1 -w1 $host \n") if($debug); 
		$res = `ping -c1 -w1 $host`;
	}
    if($res =~ /100%/ || !$res) {
		return("");
    }
	else{
		return("yes");
	}
}


sub mygetip() {
    local($host) = @_;
    local($i,$name,@addrlist,$altnames,$addrtype,$ip);

    if(!(($name,$altnames,$addrtype,$len,@addrlist) = gethostbyname($host))) {
        print("mygetip: IP for $host not found. Make sure your $host is a validhostname (nameserver knows it).\n");
        exit(1);
    } else {
        for ($i=0; $i<@addrlist; $i++) {
            @addrbytes = unpack("C4", $addrlist[$i]);
            $ip = join(".",@addrbytes);
        }
    }
    return($ip);
}
sub get_value {
    # give line with some tag=value it returns value.
    local($line_to_get_from) = @_;
    local($value);
    $line_to_get_from =~ s/[^_0-9a-zA-Z\/\)]*$//;
    $line_to_get_from =~ s/^[^_0-9a-zA-Z\/\(]*//;

    @tppA = "";
    @tppA = split(/=/,$line_to_get_from);
    $value = $tppA[1];
    $value =~ s/[^_0-9a-zA-Z\/\)]*$//;
    $value =~ s/^[^_0-9a-zA-Z\/\(\.]*//;

    if($value =~ /#/) {
        @tm="";
        @tm=split(/\s+/,$value);
        $value = $tm[0];
        $value =~ s/[^_0-9a-zA-Z\/\)]*$//;
        $value =~ s/^[^_0-9a-zA-Z\/\(\.]*//;
    }

    return("$value");
}
sub trim {

    local($string) = @_;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}
