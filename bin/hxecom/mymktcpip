#!/usr/bin/perl
# @(#)73        1.8.5.2     src/htx/usr/lpp/htx/bin/hxecom/mymktcpip, exer_com, htxubuntu 6/11/13 03:46:24
# mktcpip for use in linux... it configures network adatpers like the
# mktpcip command does in aix..

$p0 = $ARGV[0];
$p1 = $ARGV[1];
$p2 = $ARGV[2];
$p3 = $ARGV[3];
$p4 = $ARGV[4];
$p5 = $ARGV[5];
$p6 = $ARGV[6];
$p7 = $ARGV[7];
$p8 = $ARGV[8];

if ( -e "/etc/redhat-release" ) {
    print DEBUG_FILE ("this is a red hat release\n");
    $RedHat=1;
} else {
    print DEBUG_FILE ("this is SUSE release\n");
    $RedHat=0;
} 
# now read in the profile if it exists.
$prof = "/tmp/mktcp_debug";
unless (open (DEBUG_FILE,">>$prof")) {
	die ("Can't open $prof file!\n");
}

$debug="";

$HOSTNAME="";   # -h
$ipaddr="";     # -a
$netmask="";	# -m	
$iface=""; 		# -i
$nameserver=""; # -n
$domain="";		# -d
$gateway="";	# -g
$media="";		# -r
$type="";		# -t
$master="";             #-c

foreach $val (@ARGV) {
	$rc = &setvar($val);
	if($rc) {
		out(1);
	}
}

if($iface) {
	$res = `ifconfig $iface 2>/dev/null`;
	if(!$res) {
		print DEBUG_FILE ("The interface $iface was not available.. There must be some problem with /bin/set_linux_nets that runs at boot time.\n");
		out(1);
	}
	if( $master !~ /none/ ) {
	      &build_ifcfg_slave($iface);
	} else {
		$broadcast = &getbcast($ipaddr,$netmask);
		if($debug) {
			print DEBUG_FILE ("ifconfig $iface broadcast $broadcast netmask $netmask $ipaddr\n");
		}
		&build_ifcfg($iface);
	}
	#bring up the interface
	$res = ` ps -ef | grep dhcpcd | grep $iface | grep -v grep `;
	@res = split(" ", $res);
	$res = ` kill $res[1] >/dev/null 2>&1 `;
	$res = `ifdown $iface 2>/dev/null`;
	if( $master =~ /none/ ) {
		if ( $iface =~ /bond/) {
			if($debug) {
				print DEBUG_FILE ("ifconfig $iface $ipaddr broadcast $broadcast netmask $netmask \n");
			}
			$res = `ifconfig $iface $ipaddr netmask $netmask broadcast $broadcast up >/dev/null 2>&1`;
		} else {
			$res = `ifup $iface 2>/dev/null`;
		}
	} elsif ( $master =~ /bond/ ) {
		if($debug) {
			print DEBUG_FILE ("ifenslave $master $iface \n");
		}
		$res = `ifenslave $master $iface >/dev/null 2>&1`;
	} else {
		$res = `ifup $iface 2>/dev/null`;
	}
} else {
	print DEBUG_FILE ("No value passed for iface to mktcpip\n");
}



exit(0);



sub out {
	local($rc) = @_;
	close(DEBUG_FILE);
	exit(rc);
}


sub build_ifcfg {
	local($ifname) = @_;
	local($file);   

		$res = `echo $ifname >> /etc/ifcfg_bak/chngd_eths`;
        if($RedHat) {
            $file = "/etc/sysconfig/network-scripts/ifcfg-" . "$ifname";
        } else {
            $file = "/etc/sysconfig/network/ifcfg-" . "$ifname";
        }
        $file_new = "/etc/ifcfg_bak/ifcfg-"."$ifname";
		
	if(  -e "$file"  ) {
          if( !( -e "$file_new" ) ) {
            $res = `cp $file $file_new >/dev/null 2>&1`;
          }
	}

	# code for 2.6 kernel support as well
	print DEBUG_FILE ("executing code for 2.6 for $ifname\n");
	$mac = `ifconfig $ifname 2>/dev/null| grep eth 2>/dev/null| awk '{print \$5}'`;
	print DEBUG_FILE ("mac is $mac\n");
    if($RedHat) {
	    $file1 = `cd /etc/sysconfig/network-scripts/ 1>/dev/null 2>&1; ls ifcfg-eth* | grep -i $mac 2>/dev/null`;
    } else {
	    $file1 = `cd /etc/sysconfig/network 1>/dev/null 2>&1; ls ifcfg-eth* | grep -i $mac 2>/dev/null`;
	}
	chomp($file1);
	print DEBUG_FILE ("file1 is $file1\n");
	if ( $file1) {
        if($RedHat) {
	        $file2 = "/etc/sysconfig/network-scripts/"."$file1";
	    }else {
	        $file2 = "/etc/sysconfig/network/"."$file1";
		}
	    print DEBUG_FILE ("file to copy:$file2\n");
		$res = `mv $file2 /etc/ifcfg_bak/ 2>>/tmp/mktcp_debug`;
	}
	     

	unless (open (OUT_FILE,">$file")) {
		die ("Can't open $file file!\n");
	}
	print OUT_FILE ("DEVICE='$ifname'\n");
	print OUT_FILE ("IPADDR='$ipaddr'\n");
	print OUT_FILE ("NETMASK='$netmask'\n");
	print OUT_FILE ("BROADCAST='$broadcast'\n");
	print OUT_FILE ("BOOTPROTO='static'\n");
	print OUT_FILE ("HWADDR=$mac\n"); 
	if($RedHat) { 
		print OUT_FILE ("ONBOOT='yes'\n");
	} else { 
		print OUT_FILE ("STARTMODE='onboot'\n");
	}	
	print OUT_FILE ("USERCTL='no'\n");
	close(OUT_FILE);
}



sub build_ifcfg_slave {
	local($ifname) = @_;
	local($file);   

        if($RedHat) {
            $file = "/etc/sysconfig/network-scripts/ifcfg-" . "$ifname";
        } else {
            $file = "/etc/sysconfig/network/ifcfg-" . "$ifname";
        }
        $file_new = "/etc/ifcfg_bak/ifcfg-"."$ifname";
		$res = `echo $ifname >> /etc/ifcfg_bak/chngd_file`;
	if(  -e "$file"  ) {
          if( !( -e "$file_new" ) ) {
            $res = `cp $file $file_new`;
          }
	}

	# code for 2.6 kernel support as well
	$mac = `ifconfig $ifname 2>/dev/null| grep eth 2>/dev/null| awk '{print \$5}'`;
    if($RedHat) {
	    $file1 = `cd /etc/sysconfig/network-scripts/ 1>/dev/null 2>&1; ls ifcfg-eth* | grep -i $mac 2>/dev/null`;
    } else {
	    $file1 = `cd /etc/sysconfig/network 1>/dev/null 2>&1; ls ifcfg-eth* | grep -i $mac 2>/dev/null`;
	}
	chomp($file1);
	if ( $file1) {
        if($RedHat) {
	        $file2 = "/etc/sysconfig/network-scripts/"."$file1";
	    }else {
	        $file2 = "/etc/sysconfig/network/"."$file1";
		}
	    print DEBUG_FILE ("file to copy:$file2\n");
		$res = `mv $file2 /etc/ifcfg_bak/`;
	}

	unless (open (OUT_FILE,">$file")) {
		die ("Can't open $file file!\n");
	}
	print OUT_FILE ("DEVICE='$ifname'\n");
	print OUT_FILE ("USRCTL='no'\n");
    if($RedHat) {
        print OUT_FILE ("ONBOOT='yes'\n");
    } else {
        print OUT_FILE ("STARTMODE='onboot'\n");
    }
	print OUT_FILE ("MASTER='$master'\n");
	print OUT_FILE ("BOOTPROTO='none'\n");
	print OUT_FILE ("SLAVE='yes'\n");
	close(OUT_FILE);
}


sub setvar {
	local($input) = @_;
    $input =~ s/[^-_0-9a-zA-Z\/+]*$//;
    $input =~ s/^[^-_0-9a-zA-Z\/+]*//;
	if($input =~ /-h/) {
		$HOSTNAME=$input;
		$HOSTNAME=~s/^-h//;
		if(!$HOSTNAME) {
			print DEBUG_FILE ("Bad value passed for HOSTNAME to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("HOSTNAME=$HOSTNAME\n");
		}
	} elsif($input =~ /-a/) {
		$ipaddr=$input;
		$ipaddr=~s/^-a//;
		if(!$ipaddr) {
			print DEBUG_FILE ("Bad value passed for ipaddr to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("ipaddr=$ipaddr\n");
		}
	} elsif($input =~ /-m/) {
		$netmask=$input;
		$netmask=~s/^-m//;
		if(!$netmask) {
			print DEBUG_FILE ("Bad value passed for netmask to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("netmask=$netmask\n");
		}
	} elsif($input =~ /-i/) {
		$iface=$input;
		$iface=~s/^-i//;
		if($iface !~ /eth/ && $iface !~ /ib/ && $iface !~ /atm/ && $iface !~ /tok/ && $iface !~ /fddi/ && $iface !~ /bond/) {
			print DEBUG_FILE ("Bad value passed for iface to mktcpip......input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("iface=$iface\n");
		}
	} elsif($input =~ /-c/) {
		$master=$input;
		$master=~s/^-c//;
		if(!$master) {
			print DEBUG_FILE ("Bad value passed for nameserver to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("master=$master\n");
		}
	} elsif($input =~ /-n/) {
		$nameserver=$input;
		$nameserver=~s/^-n//;
		if(!$nameserver) {
			print DEBUG_FILE ("Bad value passed for nameserver to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("nameserver=$nameserver\n");
		}
	} elsif($input =~ /-d/) {
		$domain=$input;
		$domain=~s/^-d//;
		if(!$domain) {
			print DEBUG_FILE ("Bad value passed for domain to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("domain=$domain\n");
		}
	} elsif($input =~ /-g/) {
		$gateway=$input;
		$gateway=~s/^-g//;
		if(!$gateway) {
			print DEBUG_FILE ("Bad value passed for gateway to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("gateway=$gateway\n");
		}
	} elsif($input =~ /-r/) {
		$media=$input;
		$media=~s/^-r//;
		if(!$media) {
			print DEBUG_FILE ("Bad value passed for media to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("media=$media\n");
		}
	} elsif($input =~ /-t/) {
		$type=$input;
		$type=~s/^-t//;
		if(!$type) {
			print DEBUG_FILE ("Bad value passed for type to mktcpip..input=$input\ntype=$type");
			return(1);
		}
		if($debug) {
			print DEBUG_FILE ("type=$type\n");
		}
	} else {
			print DEBUG_FILE ("Bad value passed to mktcpip..input=$input\n");
			return(1);
	}
	return(0);
}
sub getbcast {
        local($addr=shift);
	local ($newaddr=$addr);
        local($mask=shift);
        local ($i=0);
	@paramip="";
	@paramm="";

	@paramm = $mask=~ /(\w+).(\w+).(\w+).(\w+)/;

	$i=0;
        while ($paramm[$i] eq "255")
        {
                $i++;
        }

	if ($debug) { print  DEBUG_FILE ("[0] $paramm[0] [1] $paramm[1] [2] $paramm[2] [3] $paramm[3] i= $i\n"); }


	@paramip = $addr=~ /(\w+).(\w+).(\w+).(\w+)/;

	if ($debug) { print DEBUG_FILE ("[0] $paramip[0] [1] $paramip[1] [2] $paramip[2] [3] $paramip[3] i= $i\n"); }
        
	#@tmpit="";
        #@tmpit=split(/\./,$addr);
        #$last = $tmpit[3];
        #$newaddr = $addr;
        #$newaddr =~ s/$last$/255/;

	if ($i == 3) 
	{
		$addr= "$paramip[0]"."."."$paramip[1]"."."."$paramip[2]".".255";
	}
	else {
	$addr= "$paramip[0]"."."."$paramip[1]".".255.255";
	}
        return("$addr");
}

