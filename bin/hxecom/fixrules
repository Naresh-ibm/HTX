#!/usr/bin/perl
# @(#)65	1.2.4.2  src/htx/usr/lpp/htx/bin/hxecom/fixrules, exer_com, htxubuntu 3/24/15 05:59:42
#########################################################################
print("Have you already run build_net to configure the network test?\n");
$ans = <STDIN>;
if($ans != /y/i || !(-e "/tmp/saveprof")) {
	print("You have to run build_net first to configure the networks?\n");
	exit(0);
}
unless (open (PROF_FILE,"/tmp/saveprof")) {
    die ("Can't open /tmp/saveprof file!\n");
}

$linux="";
$res = `uname -r`;
chomp($res);
$len = length($res);
if($len > 10) {
    $linux="yes";
    $entname="eth";
    $eniface="eth";
    $tokname="tr";
    $tokiface="tr";
    $atmname="atm";
    $atmiface="at";
    $fddiname="fddi";
    $fddiface="fi";
} else {
    $entname="ent";
    $eniface="en";
    $tokname="tok";
    $tokiface="tr";
    $atmname="atm";
    $atmiface="at";
    $fddiname="fddi";
    $fddiface="fi";
}



@dolist="";
$docount=0;
@networklist="";
$netcount=0;
$line = <PROF_FILE>;
while($line ne "") {
	if($line =~ /onesys/i) {
		@tmp="";
		@tmp=split(/=/,$line);
		if($tmp[1]=~/y/i) {
			$onesys = "yes";
		} else {
			$onesys = "";
		}
	}
	if($line =~ /$atmname/ || $line =~ /$entname/ || $line =~ /$tokname/ || $line =~ /$fddiname/ || $line =~ /hippi/) {
		@tmp="";
		@tmp=split(/\s+/,$line);
		$unique="yes";
		foreach $item (@networklist) {
			if($item =~ /$tmp[1]/) {
				$unique="";
				last;
			}
		}
		if($unique && $tmp[1] =~ /\d{1,3}/) {
			$networklist[$netcount++]=$tmp[1];
		}
	}
	$line = <PROF_FILE>;
}
close(PROF_FILE);

# now get list of rules to be changed.

# show rules in saveprof
print("This is the list of networks in this test, enter all, or one, or some range\n");
print("EX: To change all rules in the test enter.. all\n");
print("EX: To change just the 200net rule in the test enter.. 200\n");
print("EX: To change rule 200 through rule 220 enter...200-220\n");
foreach $item (@networklist) {
	print("$item\n");
 
}

while(1==1) {
	print("ENTER rule selection(s) here...");
	$ans = <STDIN>;
	chop($ans);
	if($ans =~ /-/) {
		#this is range.
		@tmp="";
		@tmp=split(/-/,$ans);
		$first = $tmp[0];
		$last = $tmp[1];
		if($first !~ /\d{1,3}/ || $first < 100 || $first > 220 || $last !~ /\d{1,3}/ || $last < 100 || $last > 220) {
			print("$ans is bad entry, try again!");
			next;
		} 
		for($i=$first; $i<=$last; $i++) {
			$dolist[$docount++] = "$i" . "net";
			if($onesys) {
				$dolist[$docount++] = "$i" . "nets";
			}
		}
		
	} elsif($ans =~ /all/i) {
		#do all rules in this test.
		foreach $num (@networklist) {
			$dolist[$docount++] = "$num" . "net";
			if($onesys) {
				$dolist[$docount++] = "$num" . "nets";
			}
		}
	} elsif($ans =~ /\d{1,3}/ && $ans > 100 && $ans < 220) {
			$dolist[$docount++] = "$ans" . "net";
			if($onesys) {
				$dolist[$docount++] = "$ans" . "nets";
			}
	} else {
		print("$ans is bad entry, try again!");
		next;
	}
	last;
}
 
# now get the rules changes
while(1==1) {
	print("Do you want to put back the defaults (d) or change some parms (c)?\n");
	$ans = <STDIN>;
	if($ans !~ /d/i && $ans !~ /c/i) {
		print("Please enter 'd' for defaults or 'c' to change parms\n");
		next;
	}
	last;
}
if($ans =~ /d/i) {
	print("Setting these defaults\n");
	print("PATTERN_ID=HEX255\nBUFMIN=5000\nBUFMAX=5000\nBUFINC=1\nWRITE_SLEEP=0\nREPLICATES=1\nNUM_OPER=1000\nIO_ALARM_TIME=900\n");
	$PATTERN_ID=HEX255;
	$BUFMIN=5000;
	$BUFMAX=5000;
	$BUFINC=1;
	$WRITE_SLEEP=0;
	$REPLICATES=1;
	$NUM_OPER=1000;
	$IO_ALARM_TIME=900;
} else {
	print("Here are the default values for the parms you can change\n");
	print("PATTERN_ID=HEX255\nBUFMIN=5000\nBUFMAX=5000\nBUFINC=1\nWRITE_SLEEP=0\nREPLICATES=1\nNUM_OPER=1000\n");

	print("Change PATTERN_ID.. enter new pattern file or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$PATTERN_ID="$ans";
	} else {
		$PATTERN_ID="";
	}
	print("Change BUFMIN.. enter new minimum buffer size or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$BUFMIN="$ans";
	} else {
		$BUFMIN="";
	}
	print("Change BUFMAX.. enter new maximum buffer size or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$BUFMAX="$ans";
	} else {
		$BUFMAX="";
	}
	print("Change BUFINC.. enter new buffer increment or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$BUFINC="$ans";
	} else {
		$BUFINC="";
	}
	print("Change WRITE_SLEEP.. enter new sleep between writes or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$WRITE_SLEEP="$ans";
	} else {
		$WRITE_SLEEP="";
	}
	while(1==1) {
		print("Change REPLICATES.. enter new replicates value max 50 or hit enter for no change \n");
		$ans = <STDIN>;
		chop($ans);
		if($ans !~ /n/) {
			if($ans > 50) {
				print("Value is to large, try again\n");
				next;
			}
			$REPLICATES="$ans";
		} else {
			$REPLICATES="";
		}
		last;
	}
	while(1==1) {
		print("Change IO_ALARM_TIME.. enter new IO_ALARM_TIME  or hit enter for no change \n");
		$ans = <STDIN>;
		chop($ans);
		if($ans !~ /n/) {
			$IO_ALARM_TIME="$ans";
		} else {
			$IO_ALARM_TIME="";
		}
		last;
	}
	print("Change NUM_OPER.. enter new number of writes per pass  or hit enter for no change \n");
	$ans = <STDIN>;
	chop($ans);
	if($ans !~ /n/) {
		$NUM_OPER="$ans";
	} else {
		$NUM_OPER="";
	}
}

# now do the changes:
chdir("/usr/lpp/htx/rules/reg/hxecom");
foreach $file (@dolist) {
	print("change file $file\n");
	unless (open (IN_FILE,"$file")) {
	    die ("Can't open $file file!\n");
	}
	unless (open (TMP_FILE,">/tmp/tryer")) {
	    die ("Can't open /tmp/tryer file!\n");
	}
	$line = <IN_FILE>;
	while($line ne "") {
		if($line =~ /PATTERN_ID/ && $PATTERN_ID) {
			$line = "PATTERN_ID=$PATTERN_ID\n";
		} elsif ($line =~ /BUFMIN/ && $BUFMIN) {
			$line = "BUFMIN=$BUFMIN\n";
		} elsif ($line =~ /BUFMAX/ && $BUFMAX) {
			$line = "BUFMAX=$BUFMAX\n";
		} elsif ($line =~ /BUFINC/ && $BUFINC) {
			$line = "BUFINC=$BUFINC\n";
		} elsif ($line =~ /WRITE_SLEEP/ && $WRITE_SLEEP =~ /\d{1,3}/) {
			$line = "WRITE_SLEEP=$WRITE_SLEEP\n";
		} elsif ($line =~ /REPLICATES/ && $REPLICATES) {
			$line = "REPLICATES=$REPLICATES\n";
		} elsif ($line =~ /NUM_OPER/ && $NUM_OPER) {
			$line = "NUM_OPER=$NUM_OPER\n";
		} elsif ($line =~ /IO_ALARM_TIME/ && $IO_ALARM_TIME) {
			$line = "IO_ALARM_TIME=$IO_ALARM_TIME\n";
		} 
		print TMP_FILE ("$line");
		$line = <IN_FILE>;
	}

	close(IN_FILE);
	close(TMP_FILE);
	$res = `cp /tmp/tryer $file`;
	unlink("/tmp/tryer");

}

exit(0);

