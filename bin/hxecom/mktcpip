#!/usr/bin/perl
# @(#)73        1.8.5.2     src/htx/usr/lpp/htx/bin/hxecom/mymktcpip, exer_com, htxrhel7 6/11/13 03:46:24
# mktcpip for use in linux... it configures network adatpers like the
# mktpcip command does in aix..

$p0 = $ARGV[0];
$p1 = $ARGV[1];
$p2 = $ARGV[2];
$p3 = $ARGV[3];
$p4 = $ARGV[4];
$p5 = $ARGV[5];
$p6 = $ARGV[6];
$p7 = $ARGV[7];
$p8 = $ARGV[8];

# To get function name
sub __FUNC__ {
    $func = "";
    $func = (caller 1)[3] ;
    if($func ne ""){
        $func;
    }
    else{
        "main";
    }
}

# mktcpip debug log file.  
$mktcpip_logfile=$ENV{"HTX_LOG_DIR"}."/mktcpip.log";

#Opening mktcpip debug log file
unless (open (DEBUG_LOG,">>$mktcpip_logfile")) {
    die ("Can't open $mktcpip_logfile file!\n");
}

# Determine OS platform and unix distribution
# first search lsb_release
$DISTRO  = `lsb_release -i -s 2>/dev/null | tr "[:upper:]" "[:lower:]"`;
$DISTVER = `lsb_release -r -s 2>/dev/null`; 
if($DISTRO eq '') { 
	# second, we can search in /etc/os-release or /etc/{distro}-release
	$DISTRO = ` awk '/ID/' /etc/*-release | sed 's/ID=//' | grep -v "VERSION" | grep -v "ID" | grep -v "DISTRIB"`;
    $DISTVER= ` awk '/DISTRIB_RELEASE/' /etc/*-release | sed 's/DISTRIB_RELEASE=//' | grep -v "DISTRIB_RELEASE"`;
}
if($DISTRO eq '') {
	# third search and parse /etc/issue
    $DISTRO = ` more /etc/issue | awk '{print \$1}' | sed '1!d' | sed -e "/^$$/d" 2>/dev/null | tr "[:upper:]" "[:lower:]"`; 
    $DISTVER= ` more /etc/issue | awk '{print \$2}' | sed '1!d' 2>/dev/null`; 
} 
$ubuntu = 0; 
$suse = 0; 
$fedora = 0; 
$redhat = 0; 
if ($DISTRO  =~  /ubuntu/i) { 
	$ubuntu = 1; 
}elsif ($DISTRO =~ /suse/i) { 
	$suse = 1; 
}elsif ($DISTRO =~ /fedora/i) { 
	$fedora = 1; 
} elsif ($DISTRO =~ /red/i || $DISTRO =~ /redhatenterpriseworkstation/i|| $DISTRO =~  /rhel/i || $DISTRO =~ /centos/i) { 
	$redhat = 1; 
} else { 
	&debug_log(__FUNC__,__LINE__," mktcpip Cannot detect your Distro version, distro=$DISTRO. This script would exit !! \n"); 	
	&out(-1); 
}

$KERNEL_26 = "";
$res = `uname -r | grep "2\.6\."`;
if($res) {
    &debug_log(__FUNC__,__LINE__," Running on 2.6 Kernel with distro=$DISTRO\n");
    $KERNEL_26 = "yes";
} else {
    &debug_log(__FUNC__,__LINE__," Running on 3.0 Kernel, with distro= $DISTRO \n");
}


$debug="";

$HOSTNAME="";   # -h
$ipaddr="";     # -a
$netmask="";	# -m	
$iface=""; 		# -i
$nameserver=""; # -n
$domain="";		# -d
$gateway="";	# -g
$media="";		# -r
$type="";		# -t
$master="";     # -c

foreach $val (@ARGV) {
	$rc = &setvar($val);
	if($rc) {
		&out(-2);
	}
}

if($iface eq "") { 
	&debug_log(__FUNC__,__LINE__,"No interface provided as argument. This script would exit, iface=$iface !! \n"); 
	&out(-255); 
} 
# Before going to configure IP on interface bring the interface UP. 
$state=`cat /sys/class/net/$iface/operstate`; 
chomp($state); 
&debug_log(__FUNC__,__LINE__,"$iface in file /sys/class/net/$iface/operstate is $state \n");
if($state =~ /up/) { 
	# Link is UP, we are good to move ahead 
	# Flush the existing IP address 
	$res=`ip addr flush dev $iface`; 
} else { 
	$res=`ip link set dev $iface up`; 	
	# Check again 
	$state=`cat /sys/class/net/$iface/operstate`;
	chomp($state); 
	if($state =~ /up/) { 
		# Flush the existing IP address
		$res=`ip addr flush dev $iface`; 
	} else { 
		&debug_log(__FUNC__,__LINE__," cannot bring the interface up iface=$iface or $iface state is unknown \n"); 
		&debug_log(__FUNC__,__LINE__," Probably : file /sys/class/net/$iface/operstate won't be present   !!! \n");  
		&out(-2); 
	} 
} 
# Extract broadcast address from IP Address and netmask. 
$broadcast = &getbcast($ipaddr,$netmask); 	

# Call distro specific network configuration scripts. 
if($ubuntu == 1) { 
	&configure_network_for_ubuntu(); 
} elsif ($suse == 1) { 
	&configure_network_for_suse(); 
} elsif ($fedora ==1) { 
	&configure_network_for_fedora(); 
} elsif($redhat == 1) { 
	&configure_network_for_redhat(); 
} else { 
	&debug_log(__FUNC__,__LINE__," I shouldn't be here, cannot detect distro \n"); 
	&out(-1); 
}	
#
# Done, exit with rc 0. 
&out(0); 


#################################################################################
### Function name:        debug_log
### Function arguments:   Function name, Line Number, Data
### Function description: Print/Save data in particular format. Enable
###                       $print_on_screen for on screen logs. Default Behaviour:
###                       Stores log in /tmp/build_net.log.<pid> file
#################################################################################

sub debug_log {
        local($func_name,$line_num,$print_data) = @_;
        $print_line = "";
        $tag = "mktcpip";
        $res=`date +"%d-%m-%Y %X"`;
        chop($res);
        if($print_on_screen)
        {
                print "$print_data";
        }
        else
        {
                $print_line = "[" . $res . "] [" . $tag . "] [" . $func_name . "] [" . $line_num . "]  " . $print_data;
                print DEBUG_LOG ("$print_line");
        }
}


sub out {
	local($rc) = @_;
 	#This would check whether the ip address is configured successfully.
    if($rc == 0) {
        $ip_value=`ip -4 addr show dev $iface | awk '/inet/ {print \$2}' | cut -d / -f 1`;
        chomp($ip_value);
		$ip_value = &trim($ip_value);
		chomp($ipaddr);
		$ipaddr = &trim($ipaddr);
        
        if($ip_value =~ /$ipaddr/){
            &debug_log(__FUNC__,__LINE__,"IP address $ipaddr is configured successfully\n");
			exit(0);
        } else{
            &debug_log(__FUNC__,__LINE__,"IP address $ipaddr configuration failed\n");
            exit(-7);
        }

    }
	exit($rc);
}

sub trim {

    local($string) = @_;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}

sub configure_network_for_ubuntu { 

	# Debian Distros are different. 
	$config_file="/etc/network/interfaces"; 
	if(! -f $config_file) { 
		&debug_log(__FUNC__,__LINE__,"$config_file doesn't exists. THis script would exit \n"); 
		&out(-3); 
	}

	$source_file="/etc/network/interfaces.d/htx-$iface.cfg"; 
	# Form the ethernet Line 
	$line = "auto $iface\n" . "iface $iface inet static\n" . "\taddress  $ipaddr \n" . "\tnetmask  $netmask\n" . "\tbroadcast  $broadcast\n"; 
	&debug_log(__FUNC__,__LINE__,"$line writing to file $source_file \n"); 
	`rm $source_file 2>/dev/null`; 
	unless (open (OUT_FILE,">$source_file")) { 
		&debug_log(__FUNC__,__LINE__,"$source_file cannot be opened \n"); 
		&out(-4); 
	} 
	print OUT_FILE ("$line \n"); 
	close(OUT_FILE); 

	unless (open (OUT_FILE,"<$config_file")) {
		&debug_log(__FUNC__,__LINE__,"$config_file doesn't exists. THis script would exit \n");
		&out(-3); 
	}
	@out_lines=<OUT_FILE>;
    close(OUT_FILE);
	$found = 0; 
	$tmp_file=$ENV{"HTX_LOG_DIR"}."/interfaces-$iface"; 
	`rm $tmp_file 2>/dev/null`; 
	$source_line="\nsource $source_file \n"; 
	unless (open (TMP_FILE,">$tmp_file\n")) { 
		&debug_log(__FUNC__,__LINE__,"$tmp_file cannot be opened \n"); 
		&out(-5); 
	}
	$first_token = 0; 
	$next_token = 0; 
	$found = 0; 
	foreach $line (@out_lines) { 
		chomp($line); 
		@values=split(/\s/, $line);
		&debug_log(__FUNC__,__LINE__,"token : value[0]=$values[0], value[1]=$values[1] \n"); 
		if($values[0] =~ /source/ && $values[1] eq /$iface/) { 
			print TMP_FILE ("$source_line \n ");
			$found = 1; 
			$next_token = 1; 
			&debug_log(__FUNC__,__LINE__,"source : value[0]=$values[0], value[1]=$values[1], first_token = $first_token, next_token=$next_token \n") ;
		} elsif($values[0] =~ /mapping/ || $values[0] =~ /auto/ || $values[0] =~ /allow/ || $values[0] =~ /#/ ) {
			print TMP_FILE ("$line \n");
			$next_token = 1; 
		} elsif($values[0] =~ /iface/ && $values[1] eq /$iface/ ) {  	
			$first_token = 1; 
			print TMP_FILE ("$source_line \n");	
			$found = 1;
			&debug_log(__FUNC__,__LINE__,"token : value[0]=$values[0], value[1]=$values[1], first_token = $first_token, next_token=$next_token \n") ;
		} else { 
            &debug_log(__FUNC__,__LINE__,"else : value[0]=$values[0], value[1]=$values[1], first_token = $first_token, next_token=$next_token \n") ;
            if($first_token == 0 && $next_token == 0) {
                print TMP_FILE ("$line \n");
            } elsif($first_token == 1 && $next_token == 0) {
                print TMP_FILE ("\n");
            } elsif($first_token == 0 && $next_token == 1) {
                print TMP_FILE ("$line \n");
                $next_token = 0;
            } elsif($first_token == 1 && $next_token == 1) {
                $first_token = 0;
                $next_token = 0;
                print TMP_FILE ("$line \n");
            } else {
                &debug_log(__FUNC__,__LINE__,"shouldn't reach here, first_token=$first_token, next_token=$next_token \n");
            }

		} 
	}	
	if($found == 0) { 
		print TMP_FILE ("$source_line \n"); 
	} 
	close(TMP_FILE); 
	`cp $tmp_file $config_file`;  
	`rm $tmp_file`; 

	&debug_log(__FUNC__,__LINE__,"ifdown $iface 2>/dev/null \n");
	$res = `ifdown $iface 2>/dev/null`;

	&debug_log(__FUNC__,__LINE__,"ifup $iface --force 2>/dev/null \n"); 
	$res = `ifup $iface --force 2>/dev/null`;
	&out(0); 
}  

sub configure_network_for_suse { 
	$config_dir="/etc/sysconfig/network/"; 
	$config_file="/etc/sysconfig/network/ifcfg-" . "$iface";
	&build_ifcfg($config_dir, $config_file, $iface);
} 

sub configure_network_for_fedora { 

	# Fedora is a child of REDHAT till date 
	&configure_network_for_redhat(); 
} 

sub configure_network_for_redhat { 

	$config_dir ="/etc/sysconfig/network-scripts/"; 
	$config_file="/etc/sysconfig/network-scripts/ifcfg-" . "$iface";
	&build_ifcfg($config_dir, $config_file, $iface);
}



sub build_ifcfg {
	local($dir_to_grep, $file, $ifname ) = @_;
	
	if( -d $dir_to_grep) { 
	} else { 
		&debug_log(__FUNC__,__LINE__," Directory $dir_to_grep doesnot exists. This script needs to be updated for  this Distro \n"); 
		&out(-3); 
	}
	$mac = `ip link show dev $ifname 2>/dev/null | awk ' /link/ { print \$2 } '`; 	

	chomp($mac); 
	chdir($dir); 

	if($ifname =~ /tm/ ) {
		#Network Team interface
		$file1="/etc/sysconfig/network-scripts/ifcfg-$ifname";
	}	elsif($ifname =~ /bond/) {
		$file1="/etc/sysconfig/network/ifcfg-$ifname";
	}else {
		$file1=`grep -ir '$mac' $dir_to_grep | cut -d : -f 1`;
		&debug_log(__FUNC__,__LINE__," Searching $mac in $dir_to_grep and found=$file1\n"); 
	}
	chomp($file1);
	if($file != $file1) { 
		&debug_log(__FUNC__,__LINE__," config_file $file, actually found $file1. Check mktcpip script \n"); 
	}
	&debug_log(__FUNC__,__LINE__,"mac = $mac, file1=$file1 \n"); 
	unless (open (OUT_FILE,"<$file1")) {
        &debug_log(__FUNC__,__LINE__," Configuration file for $ifname doesnot exists. \nthis script would create one !! \n");
        &debug_log(__FUNC__,__LINE__," Creating file = $file \n");
        unless (open (OUT_FILE,">$file")) {
        &debug_log(__FUNC__,__LINE__,"Can't create configuration file for $iface, file=$file !\n");
        }
		if($ifname =~ /ib/) { 
			print OUT_FILE ("TYPE=InfiniBand\n"); 
			&debug_log(__FUNC__,__LINE__,"TYPE=InfiniBand\n");
			print OUT_FILE ("CONNECTED_MODE=yes\n");
			&debug_log(__FUNC__,__LINE__,"CONNECTED_MODE=yes\n");
		} elsif($ifname =~ /tm/) {
			#Network Team interface
			print OUT_FILE ("DEVICETYPE=Team\n");
            		&debug_log(__FUNC__,__LINE__,"DEVICETYPE=Team\n");
			print OUT_FILE ("IPV6INIT=no\n");
	        	&debug_log(__FUNC__,__LINE__,"IPV6INIT=no\n");

		}else { 
        	print OUT_FILE ("TYPE=Ethernet\n");
        	&debug_log(__FUNC__,__LINE__,"TYPE=Ethernet\n");
		}

		if($ifname !~ /tm/){
			#Network Team interface
			if($ifname !~ /ib/){
				#ifconfig is unable to read all 20 bytes and should never be
				#used to try and find the correct hardware address for an IPoIB
				#device.Hence build_net won't populate HWADDR for IPoIB.
	       		print OUT_FILE ("HWADDR=$mac\n");
    	    		&debug_log(__FUNC__,__LINE__,"HWADDR=$mac\n");
			}
		}
		if($ifname =~ /tm/){
			#Network Team interface
			print OUT_FILE ("IPV6INIT=no\n");
	        	&debug_log(__FUNC__,__LINE__,"IPV6INIT=no\n");
		}
        print OUT_FILE ("DEVICE=$ifname\n");
        &debug_log(__FUNC__,__LINE__,"DEVICE=$ifname\n");
        print OUT_FILE ("NAME=$ifname\n");
        &debug_log(__FUNC__,__LINE__,"NAME=$ifname\n");
        print OUT_FILE ("IPADDR=$ipaddr\n");
        &debug_log(__FUNC__,__LINE__,"IPADDR=$ipaddr\n");
        print OUT_FILE ("NETMASK=$netmask\n");
        &debug_log(__FUNC__,__LINE__,"NETMASK=$netmask\n");
        print OUT_FILE ("BROADCAST=$broadcast\n");
        &debug_log(__FUNC__,__LINE__,"BROADCAST=$broadcast\n");
		if($suse == 1) { # Suse uses BOOTPROTO differently 
			print OUT_FILE ("BOOTPROTO=static\n"); 
			&debug_log(__FUNC__,__LINE__,"BOOTPROTO=static\n"); 
			print OUT_FILE ("STARTMODE=onboot\n");
            		&debug_log(__FUNC__,__LINE__,"STARTMODE=onboot\n");
		} elsif($redhat == 1 || $fedora == 1) {  
            print OUT_FILE ("ONBOOT=yes\n");
            &debug_log(__FUNC__,__LINE__,"ONBOOT=yes\n");
			#
			#Recently NM is considered to bring interface UP, so reverting back to let NM control this iface .. 
			#

			if($ifname !~ /tm/) { 
				#Network Team interface
	            print OUT_FILE ("NM_CONTROLLED=no \n");
    	        &debug_log(__FUNC__,__LINE__,"NM_CONTROLLED=no \n");
			}
        	print OUT_FILE ("BOOTPROTO=none\n");
        	&debug_log(__FUNC__,__LINE__,"BOOTPROTO=none\n");
		} else { 
			&debug_log(__FUNC__,__LINE__," Unknown distribution .. Exiting \n"); 
			&out(-2); 
		}
        close(OUT_FILE);
		&out(0); 
	}
	
   	@out_lines=<OUT_FILE>;
   	close(OUT_FILE);
	$num_out_lines=$#out_lines; 
	if($num_out_lines == 0) { 
		&debug_log(__FUNC__,__LINE__," File $file1 Corrupted !! \n");
		&out(-4); 
	}
   	unless (open (TMP_OUT,">/tmp/tmp_out")) {
       	&debug_log(__FUNC__,__LINE__,"Can't open tmp_out file doing tmp_out file!\n");
		&out(-5); 
   	}
	$num_lines=0; 
	$ipaddr_found = 0; 
	$netmask_found = 0;
	$broadcast_found = 0;
	$nm_controlled = 0; 
	$type_found = 0; 
	$mode_found = 0; 
   	foreach $line (@out_lines) {
		if($line =~ /IPADDR/) { 
			print TMP_OUT ("IPADDR=$ipaddr \n"); 
			$ipaddr_found = 1; 
		} elsif($line =~ /NETMASK/) { 
			print TMP_OUT ("NETMASK=$netmask \n"); 
			$netmask_found = 1; 
		} elsif($line =~ /BROADCAST/) {
			print TMP_OUT ("BROADCAST=$broadcast \n");
			$broadcast_found = 1;
		} elsif($line =~ /ONBOOT/) { # For redhat 
			print TMP_OUT ("ONBOOT=yes\n");
           	$num_lines++;
		} elsif($line =~ /STARTMODE/) { #For Suse  
			print TMP_OUT ("STARTMODE=onboot\n");
			$num_lines++; 
		} elsif($line =~ /BOOTPROTO/) { 
			if($suse == 1) { #suse uses BOOTPROTO differently 
				print TMP_OUT ("BOOTPROTO=static \n"); 
			} else { 
				print TMP_OUT ("BOOTPROTO=none \n"); 
			}
		} elsif($line =~ /NM_CONTROLLED/) { 
			if($ifname !~ /tm/) {

				print TMP_OUT ("NM_CONTROLLED=no \n"); 
				$nm_controlled = 1; 
			}
		} elsif($line =~ /TYPE/) { 
			if($ifname =~ /ib/) { 
            	print TMP_OUT ("TYPE=InfiniBand\n");
        	} elsif($ifname =~ /tm/) {
				#Network Team interface
				print TMP_OUT ("DEVICETYPE=Team\n");
				print TMP_OUT ("IPV6INIT=no\n");

			} else {
            	print TMP_OUT ("TYPE=Ethernet\n");
			}
			$type_found = 1; 
		} elsif($line =~ /CONNECTED_MODE/) { 
			print TMP_OUT ("CONNECTED_MODE=yes\n"); 
			$mode_found = 1; 
		} elsif($line =~ /UUID/ || $line =~ /IPV6/) { 
			#Stuff that i don't want on my configuration file. 
		} elsif($line =~ /IPV6INIT/) {
			print TMP_OUT ("IPV6INIT=no\n");
		}else { 
			print TMP_OUT ("$line"); 
			$num_lines++; 
		} 
	} 
	if($ipaddr_found == 0) { 
		print TMP_OUT ("IPADDR=$ipaddr\n");
	} 
	if($mode_found == 0) { 
		print TMP_OUT ("CONNECTED_MODE=yes\n");
	} 
	if($type_found == 0) { 
		if($ifname =~ /ib/) {
        	print TMP_OUT ("TYPE=InfiniBand\n");
    	} elsif($ifname =~ /tm/) {
			#Network Team interface
            print TMP_OUT ("DEVICETYPE=Team\n");
			print TMP_OUT ("IPV6INIT=no\n");
        } else {
           	print TMP_OUT ("TYPE=Ethernet\n");
        }
	}
	if($netmask_found == 0) { 
		print TMP_OUT ("NETMASK=$netmask\n");
	} 
	if($broadcast_found == 0) {
		print TMP_OUT ("BROADCAST=$broadcast\n");
	}
	if($nm_controlled == 0 && $redhat == 1) {
		if($ifname !~ /tm/) { 
			#Network Team interface
			print TMP_OUT ("NM_CONTROLLED=no \n");
		}
	} 
   	close(TMP_OUT);
	# To ensure TMP_OUT is not blank ! 
	if($num_lines > 0) { 
   		$result = `cp /tmp/tmp_out $file1 2>/dev/null`;
		&debug_log(__FUNC__,__LINE__," Update to $file1 Successful !!! \n"); 
	} else { 
		&debug_log(__FUNC__,__LINE__," Update to $file1 Failed, num_lines edited = $num_lines !!! \n"); 
		&out(-6); 
	}
   	$result = `rm /tmp/tmp_out 2>/dev/null`;

	&debug_log(__FUNC__,__LINE__,"ifdown $ifname 2>/dev/null \n");
	$res = `ifdown $ifname 2>/dev/null`;

	&debug_log(__FUNC__,__LINE__,"ifup $ifname 2>/dev/null \n"); 

	if($ifname =~ /tm/) {
		#Network Team interface
		`nmcli con load /etc/sysconfig/network-scripts/ifcfg-$iface 2>/dev/null `;
		`nmcli dev disconnect $iface`;

		`nmcli connection up $iface-p1`;
		`nmcli connection up $iface-p2`;
		`nmcli con up $iface`;
	}
	$res = `ifup $ifname 2>/dev/null`;
	&out(0); 
}

sub setvar {
	local($input) = @_;
    $input =~ s/[^-_0-9a-zA-Z\/+]*$//;
    $input =~ s/^[^-_0-9a-zA-Z\/+]*//;
	if($input =~ /-h/) {
		$HOSTNAME=$input;
		$HOSTNAME=~s/^-h//;
		if(!$HOSTNAME) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for HOSTNAME to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"HOSTNAME=$HOSTNAME\n");
		}
	} elsif($input =~ /-a/) {
		$ipaddr=$input;
		$ipaddr=~s/^-a//;
		if(!$ipaddr) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for ipaddr to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"ipaddr=$ipaddr\n");
		}
	} elsif($input =~ /-m/) {
		$netmask=$input;
		$netmask=~s/^-m//;
		if(!$netmask) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for netmask to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"netmask=$netmask\n");
		}
	} elsif($input =~ /-i/) {
		$iface=$input;
		$iface=~s/^-i//;
		if($iface !~ /tm/ && $iface !~ /eth/ && $iface !~ /ib/ && $iface !~ /atm/ && $iface !~ /tok/ && $iface !~ /fddi/ && $iface !~ /bond/ && $iface !~ /en/) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for iface to mktcpip......input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"iface=$iface\n");
		}
	} elsif($input =~ /-c/) {
		$master=$input;
		$master=~s/^-c//;
		if(!$master) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for nameserver to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"master=$master\n");
		}
	} elsif($input =~ /-n/) {
		$nameserver=$input;
		$nameserver=~s/^-n//;
		if(!$nameserver) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for nameserver to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"nameserver=$nameserver\n");
		}
	} elsif($input =~ /-d/) {
		$domain=$input;
		$domain=~s/^-d//;
		if(!$domain) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for domain to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"domain=$domain\n");
		}
	} elsif($input =~ /-g/) {
		$gateway=$input;
		$gateway=~s/^-g//;
		if(!$gateway) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for gateway to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"gateway=$gateway\n");
		}
	} elsif($input =~ /-r/) {
		$media=$input;
		$media=~s/^-r//;
		if(!$media) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for media to mktcpip..input=$input\n");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"media=$media\n");
		}
	} elsif($input =~ /-t/) {
		$type=$input;
		$type=~s/^-t//;
		if(!$type) {
			&debug_log(__FUNC__,__LINE__,"Bad value passed for type to mktcpip..input=$input\ntype=$type");
			return(1);
		}
		if($debug) {
			&debug_log(__FUNC__,__LINE__,"type=$type\n");
		}
	} else {
			&debug_log(__FUNC__,__LINE__,"Bad value passed to mktcpip..input=$input\n");
			return(1);
	}
	return(0);
}
sub getbcast {
    local($addr=shift);
	local ($newaddr=$addr);
    local($mask=shift);
    local ($i=0);
	@paramip="";
	@paramm="";

	@paramm = $mask=~ /(\w+).(\w+).(\w+).(\w+)/;

	$i=0;
    while ($paramm[$i] eq "255")
    {
    $i++;
    }

	&debug_log(__FUNC__,__LINE__,"[0] $paramm[0] [1] $paramm[1] [2] $paramm[2] [3] $paramm[3] i= $i\n"); 
	@paramip = $addr=~ /(\w+).(\w+).(\w+).(\w+)/;
	&debug_log(__FUNC__,__LINE__,"[0] $paramip[0] [1] $paramip[1] [2] $paramip[2] [3] $paramip[3] i= $i\n"); 
	#@tmpit="";
    #@tmpit=split(/\./,$addr);
    #$last = $tmpit[3];
    #$newaddr = $addr;
    #$newaddr =~ s/$last$/255/;

	if ($i == 3) 
	{
		$addr= "$paramip[0]"."."."$paramip[1]"."."."$paramip[2]".".255";
	}
	else {
	$addr= "$paramip[0]"."."."$paramip[1]".".255.255";
	}
        return("$addr");
}


