#!/bin/bash

# @(#)23   1.2.1.110  src/htx/usr/lpp/htx/etc/scripts/devconfig, htxconf, htxubuntu 1/4/16 23:25:11

  [ "$HTXLPP" ] || { echo "you must be logged in as htx to execute this command" && exit; }

  proc_ver=`grep Version /tmp/htx_syscfg | awk -F: '{print $2}'`
  proc_ver_dec=`printf %d $proc_ver`
  shared_proc_mode=`grep shared_processor_mode /tmp/htx_syscfg | awk '{print $3}'`
  
  echo "Creating mdt files. Please wait a moment."
  cat /dev/null | ./htxconf.awk > ${HTXMDT}mdt.all

  # Below logic is to avoid adding any hxediag stanza to any of the shift mdts.
  # For that, hxediag is removed from mdt.all at first place before creating 
  # other mdts out of it. After all shift mdts are created, original mdt.all
  # is restored so that only mdt.all still has hxediag stanzas. 
  cp ${HTXMDT}/mdt.all ${HTXMDT}/mdt.everything
  cat ${HTXMDT}/mdt.everything | create_mdt_without_devices.awk eth > ${HTXMDT}/mdt.all

  ln -sf ${HTXMDT}mdt.all ${HTXMDT}mdt.bu

  # When BTF_SHIFT_ENV is exported to 1 (which happens from runstx with -x), we
  # call build_net bpt and mdt_net with mdt.bu. This will add all the enabled eth
  # interfaces to mdt.bu. So, when all other shift mdts are created from mdt.bu, 
  # they will have eth devices in them.
  if [[ $BTF_SHIFT_ENV -eq 1 ]];
  then
      echo "Setting up shift automation for hxecom"
      /usr/bin/build_net bpt y n /tmp/networks 2> /dev/null
      /usr/lpp/htx/mdt/mdt_net mdt.bu
  fi


  if [ $CMVC_RELEASE = "htxltsbml" ];
  then
      echo "Creating mdt.ptsall ....."
      cat /dev/null | ./ptsconf.awk > ${HTXMDT}mdt.ptsall
      ln -sf ${HTXMDT}mdt.ptsall ${HTXECG}ptsall.bu
  fi
  
  cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk  sctu > ${HTXMDT}mdt.sctu
  cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk  fpscr fpu cache cpu rng tlbie > ${HTXMDT}mdt.cpu
  cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk sctu fpscr mem tlbie fpu cache cpu rng > ${HTXMDT}mdt.io

 
  echo "Creating ecg.bu Please wait a moment."
  [ -d /usr/lpp/htx/ecg ] || mkdir /usr/lpp/htx/ecg
  rm -f ${HTXECG}ecg.bu
  ln -sf ${HTXMDT}mdt.all ${HTXECG}ecg.bu

  if [ $proc_ver_dec -ge 63  ]; # Shifts for P7 & above
  then

	if [ $proc_ver_dec -ge 74  ]; # RNG Shifts for P7+ and above.
	then
		create_my_mdt rng:rules.default > ${HTXMDT}mdt.rng
		cp ${HTXMDT}mdt.io ${HTXMDT}mdt.ci
        cat ${HTXMDT}/mdt.rng | create_mdt_without_devices.awk default >> ${HTXMDT}mdt.ci
	fi

	# Set cache rulefile based on architecture. 
	if [ $proc_ver_dec -le 74 ];
	then
		cache_sw_prefetch_rf="default.sw_prefetch"
		cache_rf="default.p7"
	else
		cache_sw_prefetch_rf="default.sw_prefetch.p8"
		cache_rf="default.p8"
	fi

	create_my_mdt cache:rules.noprefetch > ${HTXMDT}/mdt.cache.noprefetch
	create_my_mdt cache:$cache_sw_prefetch_rf > ${HTXMDT}/mdt.cache.sw_prefetch
	create_my_mdt cache:rules.l2_and_l3_bounce > ${HTXMDT}/mdt.cache.l2_and_l3_bounce
	
	create_my_mdt mem:memmfg.nodelay > ${HTXMDT}/mdt.mem
	create_my_mdt mem:memmfg.nodelay tlbie: > ${HTXMDT}/mdt.mem_tlbie
	create_my_mdt mem:mem_16m_hwpf > ${HTXMDT}/mdt.mem.hw_prefetch
	create_my_mdt mem:rules.dl1_reloads_from_caches > ${HTXMDT}/mdt.mem.dl1_reloads_from_caches
	create_my_mdt mem:rules.max_cache_hit > ${HTXMDT}/mdt.mem.max_cache_hit
	create_my_mdt mem:rules.max_cache_miss > ${HTXMDT}/mdt.mem.max_cache_miss
	
	create_my_mdt sctu: cache:$cache_rf mem:memmfg tlbie:tlbie > ${HTXMDT}/mdt.nest
	create_my_mdt sctu:rules.CacheBias > ${HTXMDT}/mdt.cachebias
	create_my_mdt tlbie: > ${HTXMDT}/mdt.tlbie
	
	# Create mdt.mem_nest having reduced sctu devices.
	# sctu devices created are half compared to sctu devices in mdt.bu
        echo "Creating mdt.mem_nest ..."
	create_my_mdt cache:$cache_sw_prefetch_rf mem:memmfg > ${HTXMDT}/mdt.mem_nest
	create_my_sctu_stanzas.awk MEM_NEST >> ${HTXMDT}/mdt.mem_nest
    
	# Create mdt.bu.characterization having only 1 sctu server per gang.
	# Number of sctu servers per gang is reduced to get optimum fmax results.
	create_my_mdt fpu:fpu_cpu_combo.p8 mem:memmfg > ${HTXMDT}/mdt.bu_char
	cat ${HTXMDT}mdt.bu | create_mdt_without_devices.awk default cpu fpu sctu mem >> ${HTXMDT}/mdt.bu_char
	create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu_char

	cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk sctu > ${HTXMDT}mdt.bu.characterization
	create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu.characterization
	echo >> ${HTXMDT}mdt.bu.characterization

	if [[ "$shared_proc_mode" = "no" ]];
	then
		num_nodes=`awk -F : '/Number of nodes/ {print $2}' /tmp/htx_syscfg`
		if [ $num_nodes -gt 1 ]
		then
			echo "Creating mdt.sctu.InterNode ..."
			cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk > ${HTXMDT}mdt.sctu.InterNode
			create_my_sctu_stanzas.awk INTERNODE >> ${HTXMDT}mdt.sctu.InterNode
		fi

		#Background for SCTU chip and node mdts
		/usr/lpp/htx/bin/hxesctu SCTU_DEV
		create_my_mdt default > ${HTXMDT}/mdt.sctu.chip
		cp ${HTXMDT}/mdt.sctu.chip ${HTXMDT}/mdt.sctu.node

		# Creating sctu devices in chip and node mdts.
		echo "Creating mdt.sctu.chip ..."
		create_my_sctu_stanzas.awk CHIP >> ${HTXMDT}/mdt.sctu.chip
		echo "Creating mdt.sctu.node ..."
		create_my_sctu_stanzas.awk NODE >> ${HTXMDT}/mdt.sctu.node
	fi


	create_my_mdt fpu: cpu:rules.default fpscr:default > ${HTXMDT}/mdt.core
	# assuming core.GB (which is derived out of mdt.core_wo_cpu) does not run on P7 system. (hardcoding rulefile to fpu_cpu_combo.p8)
	create_my_mdt fpu:fpu_cpu_combo.p8 fpscr:default > ${HTXMDT}/mdt.core_wo_cpu
	
	echo "Creating mdt.maxpwr ..."
	/usr/lpp/htx/etc/scripts/create_mdt_maxpower.pl >${HTXMDT}/mdt.maxpwr
	
	if [ -f /tmp/mpath_parts ]; then
		hxestorage_default=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
		hxestorage_buster=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
		hxestorage_easytier=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:easytier ",$0)}'`
		hxestorage_cache=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
		hxestorage_comm_db_opk=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_opk ",$0)}'`
		hxestorage_comm_db_pk=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_pk ",$0)}'`
		hxestorage_app_server=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.app_server ",$0)}'`
		hxestorage_web_server=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.web_server ",$0)}'`
		hxestorage_hpc_comp_node=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_comp_node ",$0)}'`
		hxestorage_hpc_io_node=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_io_node ",$0)}'`
		hxestorage_business_int_db_pk=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_pk ",$0)}'`
		hxestorage_business_int_db_opk=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_opk ",$0)}'`
		hxestorage_4K_seq_write=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_write ",$0)}'`
		hxestorage_4K_seq_read=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_read ",$0)}'`
		hxestorage_256K_seq_write=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_write ",$0)}'`
		hxestorage_256K_seq_read=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_read ",$0)}'`
		hxestorage_4K_rand_write=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.WR_IOPs ",$0)}'`
		hxestorage_4K_rand_read=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.RD_IOPs ",$0)}'`
		hxestorage_camss_cloud=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_cloud ",$0)}'`
		hxestorage_camss_video_streaming=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_video_streaming ",$0)}'`
		hxestorage_camss_med_imaging=`cat /tmp/rawpart /tmp/dvdwpart /tmp/mpath_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_med_imaging ",$0)}'`
	else
		hxestorage_default=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
		hxestorage_buster=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
		hxestorage_easytier=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:easytier ",$0)}'`
		hxestorage_cache=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:hd.cache ",$0)}'`
		hxestorage_comm_db_opk=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_opk ",$0)}'`		
		hxestorage_comm_db_pk=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_pk ",$0)}'`
		hxestorage_app_server=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.app_server ",$0)}'`
		hxestorage_web_server=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.web_server ",$0)}'`
		hxestorage_hpc_comp_node=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_comp_node ",$0)}'`
		hxestorage_hpc_io_node=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_io_node ",$0)}'`
		hxestorage_business_int_db_pk=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_pk ",$0)}'`
		hxestorage_business_int_db_opk=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_opk ",$0)}'`
		hxestorage_4K_seq_write=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_write ",$0)}'`
		hxestorage_4K_seq_read=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_read ",$0)}'`
		hxestorage_256K_seq_write=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_write ",$0)}'`
		hxestorage_256K_seq_read=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_read ",$0)}'`
		hxestorage_4K_rand_write=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.WR_IOPs ",$0)}'`
		hxestorage_4K_rand_read=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.RD_IOPs ",$0)}'`
		hxestorage_camss_cloud=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_cloud ",$0)}'`
                hxestorage_camss_video_streaming=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_video_streaming ",$0)}'`
		hxestorage_camss_med_imaging=`cat /tmp/rawpart /tmp/dvdwpart | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_med_imaging ",$0)}'`
	fi

	#Remove all storage mdts first and then create them fresh
	rm ${HTXMDT}/mdt.hd 2>/dev/null
	rm ${HTXMDT}/mdt.hdbuster 2>/dev/null
	rm ${HTXMDT}/mdt.easytier 2>/dev/null
	rm ${HTXMDT}/mdt.hd.cache 2>/dev/null
	rm ${HTXMDT}/mdt.comm_db_opk 2>/dev/null
	rm ${HTXMDT}/mdt.hpc_io_node 2>/dev/null
	rm ${HTXMDT}/mdt.business_int_db_opk 2>/dev/null
	rm ${HTXMDT}/mdt.storage_4K_seq_write 2>/dev/null
	rm ${HTXMDT}/mdt.storage_4K_seq_read 2>/dev/null
	rm ${HTXMDT}/mdt.storage_256K_seq_write 2>/dev/null
	rm ${HTXMDT}/mdt.storage_256K_seq_read 2>/dev/null
	rm {HTXMDT}/mdt.storage_4K_rand_write 2>/dev/null
	rm {HTXMDT}/mdt.storage_4K_rand_read 2>/dev/null
	rm {HTXMDT}/mdt.camss_cloud 2>/dev/null
	rm {HTXMDT}/mdt.camss_video_streaming 2>/dev/null
	rm {HTXMDT}/mdt.camss_med_imaging 2>/dev/null
	
	if [ "$hxestorage_default" != "" ];
	then
		create_my_mdt $hxestorage_default> ${HTXMDT}/mdt.hd
		create_my_mdt $hxestorage_buster> ${HTXMDT}/mdt.tmp
		cat ${HTXMDT}/mdt.tmp $* | \
		sed 's/default\.hdd/hdd\.buster/' | sed 's/default\.ssd/ssd\.buster/' > ${HTXMDT}/mdt.hdbuster
		rm ${HTXMDT}/mdt.tmp
		create_my_mdt $hxestorage_easytier> ${HTXMDT}/mdt.easytier
		create_my_mdt $hxestorage_cache> ${HTXMDT}/mdt.hd.cache
		create_my_mdt $hxestorage_comm_db_opk > ${HTXMDT}/mdt.comm_db_opk
		create_my_mdt $hxestorage_hpc_io_node > ${HTXMDT}/mdt.hpc_io_node
		create_my_mdt $hxestorage_business_int_db_opk > ${HTXMDT}/mdt.business_int_db_opk
		create_my_mdt $hxestorage_4K_seq_write > ${HTXMDT}/mdt.storage_4K_seq_write
		create_my_mdt $hxestorage_4K_seq_read > ${HTXMDT}/mdt.storage_4K_seq_read
		create_my_mdt $hxestorage_256K_seq_write > ${HTXMDT}/mdt.storage_256K_seq_write
		create_my_mdt $hxestorage_256K_seq_read > ${HTXMDT}/mdt.storage_256K_seq_read
		create_my_mdt $hxestorage_4K_rand_write > ${HTXMDT}/mdt.storage_4K_rand_write
		create_my_mdt $hxestorage_4K_rand_read > ${HTXMDT}/mdt.storage_4K_rand_read
	fi
	
	create_my_mdt $hxestorage_default mem:memmfg ven:default > ${HTXMDT}/mdt.mem.io
	create_my_mdt $hxestorage_default ven:default mem:memmfg cache:$cache_rf sctu: tlbie:tlbie > ${HTXMDT}/mdt.nest.io
	create_my_mdt $hxestorage_cache ven:default cache:$cache_rf sctu: > ${HTXMDT}/mdt.cache.io
	create_my_mdt mem:rules.comm_db_pk $hxestorage_comm_db_pk cpu:rules.comm_db_pk  > ${HTXMDT}/mdt.comm_db_pk
        create_my_mdt $hxestorage_app_server mem:rules.app_server > ${HTXMDT}/mdt.app_server #mdt for application or middleware server
        create_my_mdt $hxestorage_web_server mem:rules.web_server > ${HTXMDT}/mdt.web_server #mdt for edge or webserver
        create_my_mdt mem:rules.hpc_comp_node fpu:rules.hpc_comp_node $hxestorage_hpc_comp_node > ${HTXMDT}/mdt.hpc_comp_node # mdt for HPC compute node
        create_my_mdt $hxestorage_business_int_db_pk cpu:rules.business_int_db_pk > ${HTXMDT}/mdt.business_int_db_pk
        
	create_my_mdt ven:default > ${HTXMDT}/mdt.ventura

# Core shifts
	create_my_mdt fpu: > ${HTXMDT}/mdt.fpu
	create_my_mdt fpu:bypass_mix1 > ${HTXMDT}/mdt.fpu.bypass_mix1
	create_my_mdt fpu:bypass_mix2 > ${HTXMDT}/mdt.fpu.bypass_mix2
	create_my_mdt fpu:data_security > ${HTXMDT}/mdt.fpu.data_security
	create_my_mdt fpu:fpscr_bfu > ${HTXMDT}/mdt.fpu.fpscr_bfu
	create_my_mdt fpu:fpscr_vsx > ${HTXMDT}/mdt.fpu.fpscr_vsx
	create_my_mdt fpu:vsx_rounding > ${HTXMDT}/mdt.fpu.vsx_rounding
	create_my_mdt fpu:rules.multi > ${HTXMDT}/mdt.fpu.multi
	create_my_mdt fpu:stress > ${HTXMDT}/mdt.fpu.stress
	create_my_mdt fpu:vscr > ${HTXMDT}/mdt.fpu.vscr
	if [ $proc_ver_dec -lt 75 ]; #Following shifts should be created till P7+ only. Not in P8.
	then
		create_my_mdt fpu:p1_lock > ${HTXMDT}/mdt.fpu.p1_lock
		create_my_mdt fpu:xs_dfp > ${HTXMDT}/mdt.fpu.xs_dfp
	fi




# P8 specific core, nest and IO workload/shifts

	if [ $proc_ver_dec -ge 75 ]; then
		#core shifts

		create_my_mdt cpu:rules.thread_priority > ${HTXMDT}/mdt.thread_priority
		create_my_mdt cpu:rules.vsx.vmx fpu:rules.vsx.vmx> ${HTXMDT}/mdt.vsx.vmx
		create_my_mdt cpu:rules.unalign_shl_lhl > ${HTXMDT}/mdt.cpu.unalign_shl_lhl
		create_my_mdt cpu:rules.unalign > ${HTXMDT}/mdt.cpu.unalign
		create_my_mdt cpu:rules.branch > ${HTXMDT}/mdt.cpu.branch
		create_my_mdt cpu:rules.prefetch_n_sync sctu:rules.CacheBias cache:$cache_sw_prefetch_rf > ${HTXMDT}/mdt.prefetch_n_sync
		create_my_mdt sctu:rules.LwarxStwcx cpu:rules.larx_stcx > ${HTXMDT}/mdt.larx_stcx
		create_my_mdt cpu:rules.shl_lhl > ${HTXMDT}/mdt.cpu.shl_lhl
		create_my_mdt fpu:rules.interleaving > ${HTXMDT}/mdt.fpu.interleaving
		create_my_mdt fpu:rules.sao cpu:rules.sao sctu:rules.64.SAO > ${HTXMDT}/mdt.sao

		#nest shifts

		create_my_mdt cache:rules.l2_bounce.p8 > ${HTXMDT}/mdt.cache.l2_bounce
		create_my_mdt cache:default.eco.p8 > ${HTXMDT}/mdt.cache.dynamic_eco
		create_shift_mem_L4test.awk L4 > ${HTXMDT}/mdt.l4
		create_shift_mem_L4test.awk rules.MBA > ${HTXMDT}/mdt.mba
		
		#CAMSS workloads
		if [ "$hxestorage_default" != "" ];
		then
		    create_my_mdt $hxestorage_camss_cloud > ${HTXMDT}/mdt.camss_cloud
		    create_my_mdt $hxestorage_camss_video_streaming > ${HTXMDT}/mdt.camss_video_streaming
		    create_my_mdt $hxestorage_camss_med_imaging > ${HTXMDT}/mdt.camss_med_imaging
		fi
		
	fi
  fi
  
  # mdt.mem should have been created before create_ab_mem_mdt
  
  if [ $proc_ver_dec -le 62 ]; # Shifts for P6 & earlier 
    then
  	create_my_mdt mem:memmfg.p6 > ${HTXMDT}/mdt.mem
  fi
  
  if [ $proc_ver_dec -ge 62 ]; # Shifts for P6 & above
  then
	create_ab_mem_mdt 2>/dev/null
	create_mdt_ab 2>/dev/null
	create_mdt_xyz 2>/dev/null
	create_mdt_powermixer.sh 2>/dev/null
	create_mdt_ewm 2>/dev/null
  fi
  
  # Create mdt mdt.eq_cpu_mem_100 for 90% mem and 100% cpu usage.
  # Naming convention shows that it is a equaliser mdt. But, actually
  # it is not. name is kept like this so as not to break anything at
  # custome location. 
  create_my_mdt mem:mem.eq.90 cpu: > ${HTXMDT}/mdt.eq_cpu_mem_100
  
  
  if [ -f ${HTXMDT}mdt.mem_nest ]; then
    ln -sf ${HTXMDT}mdt.mem_nest ${HTXECG}ecg.mem_nest
  fi

# Create mdt.bsr
  #if [ $proc_ver_dec -lt 75 ]; # Do not create bsr in P8.
  #then
    #create_mdt_bsr
  #fi
  
  # calling TPSM mdt creating script.
  #if [[ $CMVC_RELEASE == "htxltsbml" || $CMVC_RELEASE == "htxsles11"  || $CMVC_RELEASE == "htxrhel6" || $CMVC_RELEASE == "htxrhel7" || $CMVC_RELEASE == "htxfedora" ]];
  #then
    /usr/lpp/htx/etc/scripts/create_mdt_tpsm_new 2> /dev/null
  #fi
 
# Append hxecom stanza's if possible to IO mdt's.
# First Check if Netperf module is present.

if [[ $CMVC_RELEASE == "htxltsbml"  || $CMVC_RELEASE == "htxfedora" ]];
then
	if [ -f /usr/lpp/htx/etc/scripts//netup_the_great ];
	then
		# Lets try building networks.
		rm /tmp/mdt.nets 2>/dev/null
		echo "Building Networks. Please wait ..."
		//usr/lpp/htx/etc/scripts//netup_the_great &>/dev/null
		# Check if mdt.nets is created.
		if [ -f /tmp/mdt.nets ];
		then
			echo "Appending hxecom stanza's to HTX IO mdt's . "
			echo  >> ${HTXMDT}/mdt.io
			cat /tmp/mdt.nets >> ${HTXMDT}/mdt.io

			echo  >> ${HTXMDT}/mdt.cache.io
			cat /tmp/mdt.nets >> ${HTXMDT}/mdt.cache.io

			echo  >> ${HTXMDT}/mdt.mem.io
			cat /tmp/mdt.nets >> ${HTXMDT}/mdt.mem.io

			echo  >> ${HTXMDT}/mdt.nest.io
			cat /tmp/mdt.nets >> ${HTXMDT}/mdt.nest.io

			#if [ $proc_ver_dec -lt 75 ]; # Do not create bsr in P8.
			#then
				#echo  >> ${HTXMDT}/mdt.bsr.mem.io 
				#cat /tmp/mdt.nets >> ${HTXMDT}/mdt.bsr.mem.io
			#fi
		fi
	fi
else 
	#Run buildnet to get loopback test network information
	if [ ! -f /tmp/saveprof ];
	then
		/usr/bin/htx_build_net;
	fi
fi	


  	
if [ $proc_ver_dec -ge 75 ]
then
	[ $CMVC_RELEASE = "htxltsbml" ] && create_mdt_mpp

	kvm_host=`grep platform /proc/cpuinfo | grep -c PowerNV`
	[ $CMVC_RELEASE = "htxfedora" -a $kvm_host -ne 0 ] && create_mdt_mpp
fi

if [[ $CMVC_RELEASE == "htxltsbml" ]];
then
  if [ $proc_ver_dec -ge 75 ]; 
  then
	create_mdt_fastipi
  fi
fi

if [[ $CMVC_RELEASE == "htxubuntu"  ]];
then

	create_my_mdt afu[0-9].[0-9]d:default > ${HTXMDT}/mdt.memcopy

	# Create surelock stanza's 
	surelock_default=`cat /tmp/cflash_parts | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s.*: ",$0)}'`	
	if [ "$surelock_default" != "" ];
	then
		create_my_mdt $surelock_default >  ${HTXMDT}/mdt.surelock
	fi

fi 

if [[ $CMVC_RELEASE == "htxrhel72le" ]];
then
	/usr/lpp/htx/etc/scripts/create_surelock_mdt
fi

if [[ $CMVC_RELEASE == "htxrhel72le" || $CMVC_RELEASE == "htxubuntu" ]];
then
	
	# Create mdt.nvidia here
	create_my_mdt nvidia:default > ${HTXMDT}/mdt.nvidia
	
	create_my_mdt nvidia:rules.BW_test > /usr/lpp/htx/mdt/mdt.nest_GPU_BW_char
	cat /usr/lpp/htx/mdt/mdt.nest | create_mdt_without_devices.awk default >> /usr/lpp/htx/mdt/mdt.nest_GPU_BW_char

	create_my_mdt nvidia:rules.BW_test > /usr/lpp/htx/mdt/mdt.mem_nest_GPU_BW_char
	cat /usr/lpp/htx/mdt/mdt.mem_nest | create_mdt_without_devices.awk default >> /usr/lpp/htx/mdt/mdt.mem_nest_GPU_BW_char
fi

# Feature#938362. Adding cpu-fpu combo rule for characterization.
create_my_mdt fpu:fpu_cpu_combo.p8 >  ${HTXMDT}/mdt.bu_combo_char
cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk default cpu fpu sctu >> ${HTXMDT}/mdt.bu_combo_char
create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu_combo_char


#For all lancer Ports: mdt.nic
#mdt.st = mdt.bu + mdt.nic - mdt.com
#mdt.xxx.ioX.st = mdt.xxx.ioX + mdt.nic - mdt.com
#create_mdt_io_st

# Please keep the call to script create_all_mdt_with_tpsm at the end, when all mdt's have
# been created.
#if [[ $CMVC_RELEASE == "htxltsbml" || $CMVC_RELEASE == "htxsles11"  || $CMVC_RELEASE == "htxrhel6" || $CMVC_RELEASE == "htxrhel7" || $CMVC_RELEASE == "htxfedora" ]];
#then
  #/usr/lpp/htx/etc/scripts/create_all_mdt_with_tpsm -pallmdt 1 -pattern _tpsm -mdt mdt.tpsm
  /usr/lpp/htx/etc/scripts/create_all_mdt_with_tpsm 2> /dev/null
#fi

# Please keep the call to script create_all_mdt_with_powermixer at the end, when all mdt's have
# been created.

/usr/lpp/htx/etc/scripts/add_mdts
if [[ $BTF_SHIFT_ENV -ne 1 ]];
then
	mv ${HTXMDT}/mdt.everything ${HTXMDT}/mdt.all    
fi

# Removing temp mdts created earlier for core.GB
rm -f ${HTXMDT}/mdt.core_wo_cpu
