#!/bin/ksh
# @(#)69        1.1  src/htx/usr/lpp/htx/etc/scripts/stx_fresh.sh, htxjsuite_sh, htx52F, htx52F_479 10/8/03 12:49:43
#
#------------------------------------------------------------------------------
# Determine if echo interprets backslash formatting and correct if possible
  [ -x /bin/echo ] && {
     [ "X`(echo '\t') 2>/dev/null`" = 'X\t' ] && alias echo="/bin/echo -e"
  }

#------------------------------------------------------------------------------
#
# Filename: fresh
#           A shell script to clean error logs from previous HTX runs and
#           to create a trial summary for the current HTX run.
#
#     Note:  'fresh' is intended to be used in place of HTX's 'runsup'
#
#------------------------------------------------------------------------------
# start collecting basic information on trial
  TLog=/usr/lpp/htx/trial.log
  tput clear

  TLog=/usr/lpp/htx/trial.log
  tput clear
  echo "fresh - HTX Version v1.1"
  echo


###############################################################################
# Check to see if HTX is running and act accordingly
  if [[ -n "$(ps -ef | grep hxssup 2>/dev/null | grep -v grep)" ]]
     then echo "HTX is currently running - fresh can not run"
          exit 9
  fi
  if [[ -n "$(ps -ef | grep eservd 2>/dev/null | grep -v grep)" ]]
     then echo "STX is currently running - fresh can not run"
          exit 9
  fi

  echo "WARNING! Continuing will destroy previous HTX trial data. Ensure" 
  echo "         that you have run save.it or recorded your trial data."
  echo "         Use <Ctrl-C> to exit."
  echo


###############################################################################
# Check to see if save.it has been run (ensure saved data)
  if [[ -e /tmp/.fresh ]]
     then echo "Warning: save.it has not been run!"
          echo
          echo "Did you forget? It is important to save each trial's data no matter"
          echo "how small or useless you may think it is.  Press CTRL-C and run"
          echo "save.it to gather the trial data and then run tsave to upload the"
          echo "saved data to dfs."
          echo
          echo "or"
          echo
          echo "At least run save.it and move the results directory (/tmp/trial)"
          echo "to another directory name for future viewing.  To do this, type:"
          echo
          echo "   mv /tmp/trial /tmp/<unique_trialname>"
          echo
          echo "Continue? \c"

          read junk

          tput clear
          echo "fresh - HTX Version v1.1"
          echo
  fi


###############################################################################
# Check to see if tsave has been run (ensure recorded data)
#  if [[ -d /tmp/trial ]]
#     then echo "Warning: tsave has not been run!"
#          echo
#          echo "Did you forget? It is important to save each trial's data no matter"
#          echo "how small or useless you may think it is.  Press CTRL-C and run"
#          echo "tsave to upload the saved data to dfs."
#          echo
#          echo "or"
#          echo
#          echo "At least move the results directory (/tmp/trial) to another directory"
#          echo "name for future viewing.  To do this, type:"
#          echo
#          echo "   mv /tmp/trial /tmp/<unique_trialname>"
#          echo
#          echo "Continue? \c"
#
#          read junk
#
#          tput clear
#          echo "fresh - HTX Version v1.1"
#          echo
#  fi


###############################################################################
# remove previous copy of trial.log if it exists
  [ -e "$TLog" ] && rm $TLog


###############################################################################
# ensure correct date and time are set
#  austinLab=$(netstat -in | grep -E "9.3.243|9.3.242|9.3.218|9.3.219")
#
#  if [[ -n $austinLab ]]
#     then setclock=$(host iofnim.austin.ibm.com | awk '{ print $3 }')
#          ping -c3 $setclock >/dev/null 2>/dev/null
#          if [ $? -eq 0 ]
#             then setclock $setclock
#                  if [[ "$?" = "0" ]]
#                     then date
#                          read yn?"Is this the correct date (Y/n): "
#                          typeset -u yn
#                          [ "$yn" = "N" ] && smit date
#                  fi
#
#             else setclock=$(host d76tserver.austin.ibm.com | awk '{ print $3 }')
#                  ping -c3 $setclock >/dev/null 2>/dev/null
#                  if [ $? -eq 0 ]
#                     then setclock $setclock
#                          if [[ "$?" = "0" ]]
#                             then date
#                                  read yn?"Is this the correct date (Y/n): "
#                                  typeset -u yn
#                                  [ "$yn" = "N" ] && smit date
#                          fi
#                  fi
#          fi
#
#     else date
#          read yn?"Is this the correct date (Y/n): "
#          typeset -u yn
#          [ "$yn" = "N" ] && smit date
#
#  fi
#
#
###############################################################################
# running jDirs to check and increase various file system sizes - if needed
# If jDirs returns an error code, fresh will stop to inform the tester to 
# re-edit the mdt.all file.  jDirs will only run once per any HTX installation.
#  /usr/lpp/htx/etc/scripts/jDirs
#  [ "$?" != "0" ] && exit


###############################################################################
# Check for trial.log and create if not found or incomplete
  create.trial.log.linux


###############################################################################
# Modify the htxaixlevel file to include the current trial name from trial.log
  htxaixlevel="/usr/lpp/htx/htxaixlevel"
  if [[ -e $htxaixlevel ]]
     then [ -e $htxaixlevel.orig ] || cp $htxaixlevel $htxaixlevel.orig
          [ -e $htxaixlevel.orig ] && cp $htxaixlevel.orig $htxaixlevel

          htxaix=$(cat $htxaixlevel)
          llength=$(echo "$htxaix" | wc -c)
          let mlength=77-llength

          tname=$(grep "Trial Name:" /usr/lpp/htx/trial.log)
          tname=${tname#*: }
          tname="Trial: $tname"

          typeset -R$mlength t=$tname
          echo "$htxaix $t" > $htxaixlevel
  fi


###############################################################################
# Add comment about trial
  comment="/tmp/.ttcomment"
  [ -e "$comment" ] && rm $comment

  echo "Answering 'yes' will result in a vi session to be opened for you to add"
  echo "comments about this trial."
  read yn?"Add comments? (y/N): "
  typeset -u -L1 yn
  if ! [[ $yn = " " || $yn = "N" ]]
     then vi $comment
  fi


###############################################################################
# Removes any core files from previous trial
  rm $(find /usr/lpp/htx -name "core") 2>/dev/null


###############################################################################
# clear system error log
#  read yn?"Would you like to clear the error log? (y/N): "
#  typeset -u -L1 yn
#  if ! [[ $yn = " " || $yn = "N" ]]
#     then echo "clearing error log"
#          errclear 0
#          export CLEAN_ERROR_LOG=yes
#          errlog="yes"
#  fi
#
#
###############################################################################
# delete all htx logs and other extraneous info from previous trial
  rm /tmp/htx*           2>/dev/null
  rm /tmp/stx*           2>/dev/null
  rm /tmp/sct*           2>/dev/null
  rm /tmp/err*           2>/dev/null
  rm /tmp/aix*           2>/dev/null
  rm /tmp/syserr*        2>/dev/null
  rm /tmp/short*         2>/dev/null
  rm /tmp/start*         2>/dev/null
  rm /tmp/list*          2>/dev/null
  rm /tmp/scraid*        2>/dev/null
  rm /tmp/sig*           2>/dev/null
  rm /tmp/*memo          2>/dev/null
  rm /tmp/*.errpt        2>/dev/null
  rm /tmp/*.cpuguard.log 2>/dev/null
  rm /var/tmp/*.log      2>/dev/null


###############################################################################
# First, test to see if we are running in an iovlab environment, then...
# If exists, will run a pre runsup script named fresh.pre
#  if [[ -n $austinLab ]]
#     then if [[ -e /usr/lpp/htx/etc/scripts/fresh.pre ]]
#             then . /usr/lpp/htx/etc/scripts/fresh.pre 2>/dev/null
#          fi
#  fi
#
# If a processor error was found in fresh.pre...
#  if [[ -n "$FRESH_PROC_ERR_PRE" ]]
#     then echo
#          echo "At least one processor error was found!"
#          echo "Problem with processor $proc:\n$(lsattr -El $FRESH_PROC_ERR_PRE)"
#          echo
#
#          read yn?"Continue (y/N): "
#          typeset -l yn
#          [ "$yn" = "y" ] && exit
#  fi
#
#
###############################################################################
# Touch file to let fresh know if save.it has been run
  touch /tmp/.fresh
  echo
 

###############################################################################
# Start HTX
#  [ -z "$errlog" ] && errlogger --- HTX Started ---
#
  stx           # start the stx daemon
#
#  [ -z "$errlog" ] && errlogger --- HTX Stopped ---
#
#
###############################################################################
# First, test to see if we are running in an iovlab environment, then...
# If exists, will run a post runsup script named fresh.post
#  if [[ -n $austinLab ]]
#     then if [[ -e /usr/lpp/htx/etc/scripts/fresh.post ]]
#             then . /usr/lpp/htx/etc/scripts/fresh.post 2>/dev/null
#
#          fi
#  fi
#
# If a processor error was found in fresh.post...
#  if [[ -n "$FRESH_PROC_ERR_POST" ]]
#     then list=$(lsdev -C | grep proc | awk '{ print $1 }')
#
#          for proc in $list
#          do errproc=$(errpt -N $proc)
#             [ -n "$errproc" ] && echo "Errors were reported in the errpt log against: $proc"
#          done
#
#          sysplanar=$(errpt -N sysplanar0)
#          [ -n "$sysplanar" ] && echo "Errors were reported in the errpt log against: sysplanar0"
#
#          echo
#          echo "Errors were found! Notify the appropriate person for the system!"
#          echo
#  fi
#
