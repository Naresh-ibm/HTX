#!/bin/bash
# @(#)47        1.16.2.14  src/htx/usr/lpp/htx/etc/scripts_stx/runstx, htxconf, htxubuntu 10/30/15 12:06:12
#
#############################################################################

usage()
{
  BASENAME=$(basename $0)
  echo "${BASENAME}: Run/shutdown STX Daemon."
  echo "Prompts whether to save previous run."
  echo " usage: ${BASENAME} [[-n] [-d] [-s] [-w] [-e] [-k] [-S] [file [...]]"
  echo "        ${BASENAME} [-h] | [-g] [-w] [-e] [-k] [-S] [-a [ecg_name]] [-r][-c]"
  echo "-d - shutdown\n\t-? - usage"
  echo "-h - help\n\t-? - usage"
  echo "-g - go! Use ecg.bu and don't save  (same as \"-n ecg.bu\")"
  echo "-n - nosave"
  echo "-s - save"
  echo "-a [ecg name] - autostart with specified ecg ( default is ecg.all ) "
  echo "-w - Don't \"sleep\" for warnings"
  echo "-l - Don't load stxclient, only start the daemon."
  echo "-S - Use stress exercisers on certain adapters (CHRP only)"
  echo "-e - Enables EEH only on TU based exercisers using pdiagex (non-graphics)"
  echo "-k - Disables HTXKDBLEVEL,for hxehd,hxefd,hxemem64,hxeflp,hxetape,hxecd"
  echo "-r - No prompts. Run daemon with default values. "
  echo "-c - automatically append ecg_net to ecg.bu"
  echo "-b [mdt name] - Auto setup of network interfaces and append eth* to given mdt."
  echo "-x - Auto setup of network and append eth* devices to mdt.bu in shifts"
  echo "file - name of ecg file in $HOME/ecg directory to use"
  echo "Defaults: prompt for everything."
  echo "NOTE: A \"-\" is a must with each option."
}


#############################################################################
# disable EEH: variable used by libpdiag for disabling EEH


  unset NOSAVE ECGFILE g_flag save_flag warning_flag STRESS shutdown_flag is_running run_flag no_stxclient
  x=`ps -ef|grep eservd|grep -v grep|wc -l`;
  if [ $x -gt 0 ]; then
     is_running=1;
  fi
  args=$#
  for ((i=1; i <= $args; i++ ))
  do
  option=${!i}
  if [ $option = "-a" -o $option = "-b" ]; then
  	j=`expr $i + 1`
  	argu=${!j}
  	argu=${argu:0:1}
  	if [ $argu != "-" ]; then
  		i=`expr $i + 1`;
  		fi
  	else
  		option=${option:0:1}
  		if [ $option != "-" ]; then
  			echo "A \"-\" is required with a option."
  			usage
  			exit 2
  		fi
  	fi
  done
  OPTIND=1                                # reset getopts parsing
  while getopts :dhgnslSekwra:cb:x ARG       # parse options

  do case $ARG in
     d) shutdown_flag=1 ;;
     l) no_stxclient=1 ;;
     esac
  done

  b_flag=0 #initialize b_flag with 0


  if [ -n "$shutdown_flag" ]
     then if [ $# -gt 1 ] 
             then echo "Usage Error: No other argument is required with -d(shutdown) flag."
             usage
             exit 2
          else
                echo "STX Shutdown Requested ..."
                rm -f /etc/cron.hourly/logrotate 2> /dev/null 

                if [ -n "$is_running" ]; then
                   echo "Shutting down STX daemon ..."
                   /usr/lpp/htx/bin/eservd -shutdown>> /tmp/daemon_log 2>&1
                   if [ -f /tmp/stx.start.stop.time ]; then
                      x=`tail -1 /tmp/stx.start.stop.time|grep stopped|wc -l`;
                      if [ $x -eq 0 ]; then
                         date +"STX (eservd) was stopped on %x at %X %Z " >> /tmp/stx.start.stop.time
                      else
                         date +"STX Daemon already deceased. Current time is %x at %X %Z " >> /tmp/stx.start.stop.time
                      fi
                   fi #start_stop
                else
                   echo "STX daemon(eservd) is not running..."
                fi #is_running
                echo "Running STX cleanup scripts..."
                for file in `/bin/ls /usr/lpp/htx/cleanup/[a-zA-Z]*.cleanup 2>/dev/null| sort`
                    do aa=`basename $file`
                       echo Cleaning ${aa%.cleanup} ....
                       $file
                    done

                #unalias exit
                exit 0
     fi
  fi #shutdown_flag

  export HTX_EEH_OFF=TRUE
  export HTXKDBLEVEL=1
  export PATH=$PATH:/usr/lpp/htx/bin:/usr/lpp/htx/etc/scripts_stx:/usr/lpp/htx/etc/scripts

# Do this if autostart is on
  if [ -n "$is_running" ]; then
     #echo "Starting STX Client..."
     #export TERM=vt100
     sleep 2

	if [ $# -eq 0 ]; then
		if [ -f /usr/lpp/htx/bin/stxclient ] ; then
			echo "Starting STX Client..."
			/usr/lpp/htx/bin/stxclient localhost
		else
			echo "STX daemon is already running. stxclient is not supported for this release"
		fi
	else
		OPTIND=1
		while getopts :dhgnslSekwra:cb:x ARG             # parse options
		do case $ARG in
			d|g|n|s|S|e|k|w|r|a|b|x)
				if [ -f /usr/lpp/htx/bin/stxclient ] ; then
					echo "Starting STX Client..."
					/usr/lpp/htx/bin/stxclient localhost 
				else
					echo "STX daemon is already running. stxclient is not supported for this release"
				fi
				;;	
			l)
				echo "STX daemon is already running."
				exit 2;;
				
			h|?|*)
				usage
				exit 0;;
		esac
		done
  	fi
  else 
     #echo "Running STX setup scripts..."
     #. /usr/lpp/htx/.htxrc
     #if [ -f /usr/lpp/htx/.autostart ]
     #     then [ -e /usr/lpp/htx/ecg/ecg.bootme ] && cp /usr/lpp/htx/ecg/ecg.bootme /usr/lpp/htx/ecg/ecg
     #          ECGFILE=/usr/lpp/htx/ecg/ecg

   # And this if autostart is off
     #else 
          unset NOSAVE ECGFILE g_flag save_flag warning_flag STRESS shutdown_flag run_flag no_stxclient
          ECGFILE="/usr/lpp/htx/ecg/ecg.bu"
          OPTIND=1                                # reset getopts parsing
          while getopts :dhgnslSekwra:cb:x ARG             # parse options
          do case $ARG in

                # nosave, use ecg.bu
                  g) g_flag=1
                     NOSAVE=1
                     ECGFILE="/usr/lpp/htx/ecg/ecg.bu" ;;

                # don't prompt for save, don't save
                  n) NOSAVE=1 ;;

                  d) echo "STX Shutdown Requested ..."
                     shutdown_flag=1 ;;


                # dont load stxclient, only start the daemon.
                  l) no_stxclient=1;;

                # don't prompt for save, do save
                  s) save_flag=1 ;;

                # Edit ecg file changing hxeglx to hxegxIO and hxebigb to hxebigbend
                  S) if [ $(bootinfo -p) = "chrp" ]
                        then STRESS=1
                        else echo "Sorry!  Stress exercisers are only supported on CHRP systems."
                             usage
                             exit 1
                     fi ;;

                # enable EEH only on TU based exercisers using pdiagex (non-graphics)
                  e) undo_eeh=1 ;;
                     #unset HTX_EEH_OFF ;;

                # Disable HTXKDBLEVEL for hxehd,hxefd,hxemem64,hxeflp,hxetape,hxecd
                  k) undo_kdb=1 ;;
                     #export HTXKDBLEVEL=0 ;;

                # No prompts. Just run the daemon.
                  r) run_flag=1 ;;

                # No wait after warnings
                  w) warning_flag=1 ;;

                # start ecg.all automatically
                  a) auto_start=1 
                     ecg_name=$OPTARG ;;


                # hxecom auto setup option. Backported from runsup.
                  b) MDTFILE=$OPTARG
                     b_flag=1 ;;
		# hxecom auto setup for BTF shifts. Its different from -b as it doesnt take an arg and adds to mdt.bu
		  x) export BTF_SHIFT_ENV=1 ;;
		     
                # usage
                  h|?|*) if [ "$OPTARG" = "a" ]; then
                             auto_start=1
                             ecg_name="/ecg.all"
                         else
                             usage
                             exit 1 
                         fi ;;
             esac
          done
	   
	  shift `expr $OPTIND - 1`
          
  echo "Running STX setup scripts..."
  n_args=1;
  for allargs in $*
  do
  list[$n_args]=$allargs
  n_args=`expr $n_args + 1`;
  done
         # Run the profile file now
            #. /usr/lpp/htx/.profile
            . /usr/lpp/htx/.bash_profile
            #. /usr/lpp/htx/.htxrc

         # Check and unset EEH
            if [ -n "$undo_eeh" ]
               then unset HTX_EEH_OFF
            fi

         # Check and unset HTXKDBLEVEL
            if [ -n "$undo_kdb" ]
               then export HTXKDBLEVEL=0
            fi

        # Check for conflicting flags.
          if [ $n_args -gt 2 ] 
             then if [ -n "$shutdown_flag" ]
                     then echo "No other argument is required with -d flag."
                     exit 2
                  fi
          fi
           
          if [ -n "$g_flag" -a -n "$save_flag" ]
             then echo "Flags -g and -s are mutually exclusive."
                  usage
                  exit 2
          fi

          if [ -n "$NOSAVE" -a -n "$save_flag" ]
             then echo "Flags -n and -s are mutually exclusive."
                  usage
                  exit 2
          fi

        if [ $b_flag -eq 1 ]
        then
            /usr/bin/build_net bpt y n /tmp/networks 2> /dev/null
            /usr/lpp/htx/mdt/mdt_net ${MDTFILE}
        fi

        # If there are any more arguments assume that it is an ECG file.
        # The -g and the ECG file argument are mutually exclusive.

          if [ $n_args -gt 1 ] 
            then if [ -z "$g_flag" ]
                     then ECGFILE=${list[1]}
                          shift 1
                     else echo "Use of -g flag implies ecg.bu -"
                          echo "do not specify a file or use -n or -s instead."
                          exit 2
                  fi
          fi


  #export HTXCNTECG=`grep : ${HTXECG}ecg | grep -v default | wc -l`
  export ECGFILE

/bin/bash /usr/lpp/htx/etc/scripts_stx/runsyslogd

# Go through this only if autostart is off and no -n flag.
# Prompt the user for the save option if there is no -s flag.

  if [ ! -n "$run_flag" ]
     then rm -f ${HTXLPP}.run_save.default
     if [ ! -f ${HTXLPP}.autostart -a -z "${NOSAVE}" ]
        then if [ -n "$save_flag" ]
                then touch ${HTXLPP}.run_save.default
             else rm -f ${HTXLPP}.run_save.default
                echo "Do you want to run save.default, which formats and compresses log files (y)?"
                read save junk
                [ "${save:="y"}" != "n" ] && touch ${HTXLPP}.run_save.default
             fi
     fi
  fi

  cd ${HTXLPP}/bin
  pwd

  sync; sync

# Log start date and time
  #date +"STX (eservd) was started on %x at %X %Z " > /tmp/stx.start.stop.time
  #errlogger --- STX Started ---

# Start HTX superviser
#  hxssup

  x=`ps -ef|grep eservd|grep -v grep|wc -l`;
  if [ $x -lt 1 ]; then
     echo "Running STX setup scripts..."
     #. /usr/lpp/htx/.htxrc
#    if [ ! -n "$run_flag" ]
#       then run_hxecom="n"
#       if [ ! -z "$com_setup" ] ; then
#          echo "setting up hxecom by default"
#          run_hxecom="y"
#       else
#          echo "do you want to append ecg.net to ecg.bu? y/(n)"
#          read run_hxecom
#       fi
#
#       if [ ! -z "$run_hxecom" ]; then
#	       if [ $run_hxecom = "y" ]; then
#	          echo "hxecom runs on ethernet adapters, make sure, the ethernet adapter"
#             echo "is used by other exercisers."
#             echo "ethernet exercisers are: goliad, scurry, galaxy, pheonix"
#             if [ ! -z "$hxecom_setup" ]; then
#                if [ $hxecom_setup -ne 1 ]; then
#                   echo "setup scripts required for hxecom aren't present"
#                   exit 2
#                fi
#             fi
#             /usr/lpp/htx/ecg/ecg_net
#          fi
#       fi
#     fi
     
     NSEM_WANTED=25000
     PROC_SEM_FILE=/proc/sys/kernel/sem
     NSEM=`cat $PROC_SEM_FILE | cut -f1`
     if [ $NSEM -lt $NSEM_WANTED ]; then
         echo $NSEM_WANTED > $PROC_SEM_FILE
     fi
     
     echo "Starting STX Daemon... "
	 if [ ! -z "$auto_start" ]; then
	 	if [ $auto_start -eq 1 ]; then
			if [ ! -z "$ecg_name" ]; then
				echo "/usr/lpp/htx/bin/eservd -auto $ecg_name > /tmp/daemon_log 2>&1"
	    		/usr/lpp/htx/bin/eservd -auto $ecg_name
			else 
				echo "/usr/lpp/htx/bin/eservd -auto > /tmp/daemon_log 2>&1"
	    		/usr/lpp/htx/bin/eservd -auto 
			fi
	 	else
			echo "/usr/lpp/htx/bin/eservd > /tmp/daemon_log 2>&1"
        	/usr/lpp/htx/bin/eservd 
	 	fi
	 else 
		echo "/usr/lpp/htx/bin/eservd > /tmp/daemon_log 2>&1"
	 	/usr/lpp/htx/bin/eservd 
	 fi

    #if [ -f /tmp/stx.start.stop.time ]; then
    #   x=`tail -1 /tmp/stx.start.stop.time|grep started|wc -l`;
    #   if [ $x -eq 0 ]; then
    #      date +"STX (eservd) was started on %x at %X %Z " >> /tmp/stx.start.stop.time
    #   fi
    #else
    #   date +"STX (eservd) was started on %x at %X %Z " >> /tmp/stx.start.stop.time
    #fi #start_stop
    # sleep 1
  fi
  #export TERM=vt100
  sleep 2
  x=`ps -ef|grep eservd|grep -v grep|wc -l`;
  if [ $x -gt 0 ]; then
	 if [ -z "$no_stxclient" ]; then
		if [ -f /usr/lpp/htx/bin/stxclient ] ; then
			echo "Starting STX Client..."
			/usr/lpp/htx/bin/stxclient localhost
		fi
	 fi
  else
     echo "$x copies of eservd running"
     echo "STX Daemon could not be started..."
  fi

  fi

# Log stop date and time
  #exit 0
