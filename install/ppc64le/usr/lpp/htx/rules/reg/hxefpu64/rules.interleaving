* This rulefile is for stressing the interleaving logic of P8.


* 50% fdiv/fsqrt and 50% simple ops with norm data only.

rule_id				rule1
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with de-norm data only.

rule_id				rule2
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with norm and de-norm data only.

rule_id				rule3
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% simple ops with ALL data.

rule_id				rule4
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0400000000a9fe00,40)(0x0400000000000018,5)(0x0100000400000000,5)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with norm data only.

rule_id				rule5
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with de-norm data only.

rule_id				rule6
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with norm and de-norm data only.

rule_id				rule7
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]


* 50% fdiv/fsqrt and 50% VSX+BFP+VMX all ops with ALL data categories.

rule_id				rule8
num_threads			0
test_method			2
num_oper			1000
stream_depth			2000
seed				[0,0,0,0,0,0,0,0]
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr				[0,0,0,0,0,0,0,0]
data_bias_mask			[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
ins_bias_mask			[(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10):(0x01000000000C0008,25)(0x02000000000000C0,25)(0x0100001fffffffff,20)(0x020000000007ffff,20)(0x0400000003ffffff,10)]

