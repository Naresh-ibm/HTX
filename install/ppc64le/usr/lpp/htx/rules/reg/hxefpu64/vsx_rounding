* Rule file for hxefpu64 exerciser running on P7.
*
* This Rule file is numberline VSX shift. It has VSX arithmatic instructions 
* with FPSCR rounding mode set to 0x01 through 0x3.
*
* For details of rule keywords, please refer README.hxefpu64
* in /usr/lpp/htx/rules/reg/hxefpu64 dir on test machine.
*
* NOTE: Rule keyword & associated value should be all in one
*	line _only_. Currently '\n' (newline) is used as
*	delimiter to differentiate between keywords.
*

* All VSX arithmatic with rounding mode 0x1 and 100% normal data

rule_id						rm1_norm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]


* All VSX arithmatic with rounding mode 0x1 and 50/50 normal/denormal data

rule_id						rm1_n_dn
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x1 and 100% denormal data

rule_id						rm1_denorm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x1 and mix data

rule_id						rm1_all_mix
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1, 0x1]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x2 and 100% normal data

rule_id						rm2_norm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]


* All VSX arithmatic with rounding mode 0x2 and 50/50 normal/denormal data

rule_id						rm2_n_dn
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x2 and 100% denormal data

rule_id						rm2_denorm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x2 and 100% mix data

rule_id						rm2_all_mix
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2, 0x2]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x3 and 100% normal data

rule_id						rm3_norm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]


* All VSX arithmatic with rounding mode 0x3 and 50/50 normal/denormal data

rule_id						rm3_n_dn
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x3 and 100% denormal data

rule_id						rm3_denorm
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

* All VSX arithmatic with rounding mode 0x3 and 100% denormal data

rule_id						rm3_all_mix
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3, 0x3]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100):(0x01000000003c0018,100)]

