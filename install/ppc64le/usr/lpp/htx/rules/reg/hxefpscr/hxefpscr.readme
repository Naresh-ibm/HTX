Goal:
-----
The main goal of hxefpscr is to verify the Floating Point Status and Control
Register (FPSCR) of floating point unit. 

Two pass method is used to run a stream of randomly selected binary floating
point instructions and the FPSCR content is compared at the end.


Salient Features:
-----------------
(1) Its a buster program which stresses floating point unit.
(2) At present, only lower 32 bits of FPSCR registers are compared.
(3) Random instruction set is generated each time.


Hardware supported & HW test scope:
-----------------------------------
FPSCR exerciser is supported on P5 machines and onwards.


Supported OS:
-------------
AIX   : y
Linux : y
BML   : y


General info:
-------------
This exerciser has very few tweakable parameters. So, the rulefile 
is small one having few fields.


Prerequisites:
--------------


Brief Description:
------------------
Floating point unit is stressed by running an instruction stream of binary 
floating point instructions which are picked randomly from a given set of 
instructions. The same instruction set is run twice. The verification of 
FPSCR register is done by comparing the contents of FPSCR register at the 
end of each pass. Any discrepancy is flagged as a miscompare.


Sample Rule:
------------
rule_id = rule_1
crash_on_mis = no
turn_attn_on = no


Exerciser specific Log files:
-----------------------------
In case of miscompare, following file is created:

	/tmp/fpscr_bust<processor_no>.txt
	

Understanding htxstats:
-----------------------
fpscr0:
  cycles                             = 2	<-- No of rule file passes done
  # good reads                       = 0
  # bytes read                       = 0
  # good writes                      = 0
  # total instructions               = 0
  # bytes written                    = 0
  # good others                      = 2	<-- No of passes successful.
  # bad others                       = 0	<-- No of passes failed.
  # bad reads                        = 0
  # bad writes                       = 0
  # data transfer rate(bytes_wrtn/s) = 0.00	
  # data transfer rate(bytes_read/s) = 0.00
  # instruction throughput(MIPS)     = 0.000000 <-- This value is currently 
                                                    not updated by the exer.


Miscompare analysis:
--------------------
Below is the example of error message in /tmp/htxerr in case of miscompare:

/dev/fpscr*       Mar 27 00:55:23 2008 err=00000000 sev=1 hxefpscr 
FPSCR BUSTER TEST CASE FAILED : See file /tmp/fpscr_bust*.txt

where * is the logical processor no. for which it failed.

Below is the contents of /tmp/fpscr_bust*.txt file:

FPSCR BUSTER TEST CASE FAILED :                             
                                                            
For Logical Processor Number : *                            
Details of Physical Processor are -                         
Proc = Proc0 Location Number = 00-00 Location Code = Process
                                                            
                                                            
Instructions Executed:    fe810800    fec08034  fcfc8ffc  fe80de9c    fe92dd8f   
                                                            
Pass 1 FPSCR =   fff80000    ae06e206                       
Pass 2 FPSCR =   fff80000    8e06e006         
Failed in loopcount = 5:5812391                             
                                                            
Input data    FPR[00] =   33accd45    c1bbdde0              
Input data    FPR[01] =   984077bf    59122212              
Input data    FPR[02] =   4fafda49    aa771f14              
Input data    FPR[03] =   63d17f63    377edd66              
Input data    FPR[04] =   390cd58d    19f0f988              
Input data    FPR[05] =   ef5fcf47    ced1c3fa              
Input data    FPR[06] =   74958311    86e8613c              
Input data    FPR[07] =   2bd5cb6b    82c9e9ce              
Input data    FPR[08] =   28f5e6d5    d5b18a30              
Input data    FPR[09] =   523217cf    b1ada2e2              
Input data    FPR[10] =   593844d9    e8e9e864   
Input data    FPR[11] =   f4ab9873    eb1e8336   
Input data    FPR[12] =   2589211d    036c2fd8   
Input data    FPR[13] =   30157157    4a2d5eca   
Input data    FPR[14] =   563b3fa1    6f84548c   
Input data    FPR[15] =   e183067b    86ae499e   
Input data    FPR[16] =   b50ba465    1f638a80   
Input data    FPR[17] =   042bfbdf    91cc97b2   
Input data    FPR[18] =   f8a59369    3ad445b4   
Input data    FPR[19] =   9b903583    d1dedd06   
Input data    FPR[20] =   466690ad    ce2e3a28   
Input data    FPR[21] =   cddbd767    517aed9a   
Input data    FPR[22] =   8e626031    0e8a5bdc   
Input data    FPR[23] =   128b458b    75c9dd6e   
Input data    FPR[24] =   45a705f5    e736ded0   
Input data    FPR[25] =   994f23ef    101c0082   
Input data    FPR[26] =   42c0c5f9    c46b3704   
Input data    FPR[27] =   4d305693    debcead6   
Input data    FPR[28] =   c07e243d    cf3c1878   
Input data    FPR[29] =   17f40177    d107706a   
Input data    FPR[30] =   caf3e4c1    0ecf772c   
Input data    FPR[31] =   49bf889b    a2b9a53e                              
                                                                            
                                                                            
GENERAL PURPOSE REGISTERS:                                                  
Gpr[00] = 00000008 Gpr[01] = 2ff20800 Gpr[02] = 20003dec Gpr[03] = 200019e0 
Gpr[04] = 00000000 Gpr[05] = fc00058e Gpr[06] = fe92dd8f Gpr[07] = 20003b50 
Gpr[08] = 00000361 Gpr[09] = 20003b34 Gpr[10] = 20003800 Gpr[11] = 000034e0 
Gpr[12] = 00000000 Gpr[13] = deadbeef Gpr[14] = 0019660d Gpr[15] = ae06e206 
Gpr[16] = 8e06e006 Gpr[17] = 20003b64 Gpr[18] = 0058b0a7 Gpr[19] = 4e800020 
Gpr[20] = deadbeef Gpr[21] = deadbeef Gpr[22] = deadbeef Gpr[23] = deadbeef 
Gpr[24] = deadbeef Gpr[25] = deadbeef Gpr[26] = deadbeef Gpr[27] = deadbeef 
Gpr[28] = deadbeef Gpr[29] = 200065c4 Gpr[30] = 200066f8 Gpr[31] = 20001060 
                                                                            
FLOATING POINT REGISTERS:                                                   
Fpr[00] = fff800008e06e006                                                  
Fpr[01] = 984077bf59122212                                                  
Fpr[02] = 4fafda49aa771f14                                                  
Fpr[03] = 63d17f63377edd66                                                  
Fpr[04] = 390cd58d19f0f988                                                  
Fpr[05] = ef5fcf47ced1c3fa                                                  
Fpr[06] = 7495831186e8613c
Fpr[07] = 4a4db3c88044b0fb   
Fpr[08] = 28f5e6d5d5b18a30   
Fpr[09] = 523217cfb1ada2e2   
Fpr[10] = 593844d9e8e9e864   
Fpr[11] = f4ab9873eb1e8336   
Fpr[12] = 2589211d036c2fd8   
Fpr[13] = 301571574a2d5eca   
Fpr[14] = 563b3fa16f84548c   
Fpr[15] = e183067b86ae499e   
Fpr[16] = b50ba4651f638a80   
Fpr[17] = 042bfbdf91cc97b2   
Fpr[18] = f8a593693ad445b4   
Fpr[19] = 9b903583d1dedd06   
Fpr[20] = 43d34c15a4f7af3b   
Fpr[21] = cddbd767517aed9a   
Fpr[22] = 7ff8000000000000   
Fpr[23] = 128b458b75c9dd6e   
Fpr[24] = 45a705f5e736ded0   
Fpr[25] = 994f23ef101c0082   
Fpr[26] = 42c0c5f9c46b3704   
Fpr[27] = 4d305693debcead6   
Fpr[28] = c07e243dcf3c1878 
Fpr[29] = 17f40177d107706a 
Fpr[30] = caf3e4c10ecf772c 
Fpr[31] = 49bf889ba2b9a53e 
                           
FPSCR = 8e06e006      

In KDB, registers will contain:
r3 - 0xBEEFDEAD
r4 - starting address of data segment of buster test case.
r5 - name of the test case.
r6 - loopcount value.

To check the instruction stream in KDB, see the contents at address 
r4+0x338
To see initial input data, see the contents at address r4+0x38.
To see Pass1 and pass2 output, see the contents at address r4+0x138 
and r4+0x238 respectively.


Limitations:
------------
(1) Only last 32-bits of FPSCR are currently compared.
(2) This exerciser only includes binary floating point instructions.

Known Issues:
-------------


Rule File Description:
----------------------

(1) The 'crash_on_mis' flag along with the htxkdblevel environment 
    variable will decide whether the machine should enter KDB in 
    case of miscompare or not.

(2) 'crash_on_mis' should only be set to "yes","YES","no,"NO" only. 
    Any other value will generate an error.

(3) If the htxkdblevel environment variable is non-zero, the machine 
    will enter KDB in case of miscompare, irrespective of the value
    'crash_on_mis'.

(4) If the 'crash_on_mis' is set to 'yes', the machine will enter the
    KDB in case of miscompare, irrespecxtive of htxkdblevel is zero or 
    non-zero.

