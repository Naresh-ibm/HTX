README for hxefpu64 exerciser
===========================

Goal:
----
To verify VSU hardware using ISA correctness check method and two pass method.
Run the test program with high enough throughput (at least few MIPS) to be able
to find hardware bugs in VSU design.


Salient Features:
-----------------
1) Capability for correctness checking (correctness check through VSU reference
model).
2) Capability to run in throughput mode (consistency check only - pass1 Vs pass2
checking).
3) Capability to bias FP data towards interesting corners through rule file on
per thread basis.
4) Capability to bias to specific instruction sub groups on per thread basis.
5) Seed based test case generation and recreation.
6) Configurable instructions stream depth (num of instructions in test case).
7) Can (build + execute + compare) SMP test case in parallel.


Hardware supported & HW test scope:
-----------------------------------
HTX VSU test program is supported only on P6 and later systems.
Currently exerciser supports BFP and VSX instructions.


Supported OS:
-------------
AIX   : y
Linux : y
BML   : y


General info:
------------
HTX VSU test program runs as user application on top of OS (AIX, BML & Linux).
Incase of miscompare, exerciser logs severity 4 message and continue to run.
HTX should create one device entry in mdt file for each processor core in
system.


Prerequisites:
--------------
- Supported on P6 and onwards hardware.
- OS Level : AIX/Linux/BML with P6 support and onwards.


Brief Description:
-----------------
HTX VSU test program is named hxefpu64. hxefpu64 generates a test case which is
a sequence of pseudo randomly picked valid VSX & BFP instructions. hxefpu64
supports two test methods:

*	Consistency check
*	Correctness check

In consistency check method, it runs the same test case twice on hardware and
compare the results of one run Vs another. In correctness check method, it runs
the test case on hardware and through simulation model and then compares the
results of one run Vs another. Test case generation of thread 0 is completely
independent of other threads. Each thread performs its build, execute and
compare in parallel to all other threads. Test case may or may not have sync
across them while executing. Each VSX/BFP instruction is collected in a static
data structure in following format:


Sample Rule:
----------------------
RULE_ID						test1
NUM_OPER					1000
THREADS_SYNC  				0
NUM_THREADS					1
PARENT_SEED					0
SEED						[0x11223344, 0, 0, 0]
STREAM_DEPTH				1000
TEST_METHOD					1
SYNC_DISTANCE				0
UNALIGNED_LOADS_STORES_%  	[30, 0, 100, 10]
FPSCR						[ 0xf8, 0, 0xe8, 0x40 ]
VSX_INS_MASK				[ 0x01001fffffffffff, 0x010000000000000f,
		    				  0x010000000000ffff, 0x01000CB00054ffff ]
BFP_INS_MASK				[ 0x020000000003ffff, 0x020000000001ffff,
	 						  0x020000000000003f, 0x0200000000002949 ]
BFP_DATA_BIAS_MASK 			[ 0x0000000055, 0x0000002233, 0x1111111111,
							0x2222200000 ]
INS_BIAS_MASK				[(0x01001fffffffffff, 80) (0x020000000003ffff, 20):
							 (0x0100000000222222, 50) (0x0100000000111111, 50):
							 (0x0100000000333333, 50) (0x0100000000444444, 50):
							 (0x0100000000666666, 50) (0x0100000000555555, 50)]


Exerciser specific Log files:
-----------------------------
/tmp/fpu_miscompare.<core number>.<pid of the hxefpu64 process>


Understanding htxstats:
-----------------------
fpu0:
  cycles                              = 7 <-- No of rule file passes done
  # good reads                        = 0
  # bytes read                        = 0
  # good writes                       = 0
  # total instructions                = 600000000 <-- Total instructions tested
  # bytes written                     = 0
  # good others                       = 300000 <-- Total test cases done
  # bad others                        = 0
  # bad reads                         = 0
  # bad writes                        = 0
  # data transfer rate(bytes_wrtn/s)  = 0.00
  # data transfer rate(bytes_read/s)  = 0.00
  # instruction throughput(MIPS)      = 0.234375 <-- Throughput


Throughput Nos:
--------------
On P6 SMT2 config, with 1000 stream depth & consistency check method: ~4 MIPS
while running alone.


Limitations:
-----------
1) Exerciser does not randomize exception enabled bits in FPSCR while running 
the test case.
2) Exerciser does not support FP estimate instructions.
3) Exerciser does not support unaligned load/store control as of now.


Known Issues:
------------
Rule file parameter THREADS_SYNC does not work for correctness as of now.


Rule File Parameters:
--------------------
Please refer rule file to know more details about rule file parameters.


HXEFPU Rule file Readme
======================

Description:
------------
Exerciser's runtime behavior is determined by rule specified in rule file.
Rule consists of multiple rule parameters (keywords). These parameters can be
tweaked by the user to control the behavior of exerciser. One can specify
multiple rules in the rule file. Rule file is a normal text file which can be
viewed and manipulated using any text editor. All changes to the rule file
should be done before starting the exerciser run. Changes made after that will
not be reflected in the current run as the rule file is read only once at the
start of the exerciser run.

Brief Description:
------------------
The brief description of each of the rule parameters is given below :

Generic parameters:

RULE_ID					:	Name of this rule.
NUM_OPER				:	Number of times the test case loop
							(build+execute+compare) will run.
THREADS_SYNC			:	Boolean. Whether threads should sync or not.
NUM_THREADS				:	Number of threads to be spawned.
PARENT_SEED				:	Master seed.

SYNC_DISTANCE			:	Number of sync points in a test case
STREAM_DEPTH			:	Number of instructions per test case.
TEST_METHOD				:	Test method (1 - Correctness, 2 - Consistency)


Parameters that needs to be specified per thread:

UNALIGNED_LOADS_STORES_%:	Percentage of unaligned loads/stores.
FPSCR					:	Input FPSCR to the execution per thread.
VSX_INS_MASK			:	Mask to filter out VSX instructions.
BFP_INS_MASK			:	Mask to filter out BFP instructions.
BFP_DATA_BIAS_MASK 		:	Specifies test case input data biasing. Controls
							register contents & load/stores area data biasing.
							It applies for both VSX and BFP streams.
INS_BIAS_MASK			:	Specifies test case instructions biasing.
SEED					:	Thread specific Seed.
DUMP_TESTCASE			:	Creates log file with testcase details.



Detailed Description:
---------------------
(1) RULE_ID:
		This parameter is used to assign name to each of the rule stanza in the
		rule file. The value should be of type character string with a maximum
		size of 20 characters. This name is dumped in case of any miscompare to
		pinpoint to the rule stanza which created the miscompare.

(2) NUM_OPER:
		This parameter is used to control the number of times build-execute-
		compare loop is run. If the value 0 is assigned to it, the loop will
		keep on running forever.
		If any positive integer value is assigned, the loop will run that many
		times in this stanza. In each loop, exerciser creates/executes/compares
		a new test case.

(3) THREADS_SYNC:
		This boolean parameter to specify whether all the threads should sync at
		the specified number of times while executing test case. If 0 is
		assigned
		then there is no syncing otherwise if 1, then the threads sync among
		themselves while executing the test case.

(4) SYNC_DISTANCE:
		Specifies the number of sync points in the test case. This parameter
		will be in effect only if THREADS_SYNC = 1.

(5) UNALIGNED_LOADS_STORES_%:
		This parameter is used to specify the percentage of unaligned memory
		access for load/store operations. By default all the loads/stores are
		performed at 16 byte boundary. By setting this parameter to anything in
		the range of 0 < x < 100, it is ensured that specified percent of
		load/store operations are performed at an odd alignment (which is not
		16-byte aligned).

			e.g. : [30, 0, 100, 10]

		In this example, unaligned percentage for 4 threads have been specified.
		The 1st thread will generate stream having 30% unaligned load/stores
		operations, second thread's stream will not have any unaligned
		load/store and so on. The %age list should be enclosed in [] and entry
		for different threads are separated by ','.

(6) NUM_THREADS:
		This parameter is used to specify the number of threads that will be
		spawned for executing the rule. The exerciser is designed in such a way
		that all threads of an instance of exerciser should always run on one
		physical core. So the current maximum value for this parameter is 4
		(SMT = 4). But this parameter is not definitive. The number of threads
		are decided based on the SMT status. It is only useful if one wants to
		run lesser number of threads than the maximum possible on one physical
		core. If the value of '-1' is assigned to this parameter, the thread
		number is decided by the exerciser itself depending on the SMT status
		of the core.
		Expected values:
			-1	:	Exerciser will decide depending on SMT status.
			1	:	For ST configuration.
			2	:	For SMT=2 configuration.
			4	:	For SMT=4 configuration (max).

(7) PARENT_SEED & SEED:
		Both PARENT_SEED & SEED should be used for recreating the desired
		testcase. PARENT_SEED is created once for every rule stanza while
		SEED is set by each SMT thread in every iteration inside NUM_OPER loop.
		If PARENT_SEED is set, it will create the exact same set of testcases
		from begining among all SMT threads. If one desires to create only the
		failing testcase then SEED should be set for a failing SMT thread and
		PARENT_SEED should be set to zero. In this case failing SMT thread will
		run the same testcase over and over again NUM_OPER times while other
		SMT threads will generate different testcases.

		Expected value:
			0	:	derived from low significal 32 bit of Timebase reg.
			X	:	Seed is set to X where X is 32-bit value.

(8) STREAM_DEPTH:
		Specifies number of instructions to be built into test case. In other
		words, this parameter controls stream length. The stream length also
		includes non-floating-point(overhead) instructions. So, actual floating
		point instructions present in the stream will be lesser than this
		parameters value.

(9) TEST_METHOD:
		Specifies test method used by exerciser. This exerciser supports 2
		test methods, i.e. CONSISTENCY and CORRECTNESS check methods. In
		Consistency check, same test case is run twice on the hardware and the
		result from these two runs are compared. In Correctness mode, once the
		test case is run on reference model and then on actual hardware. The
		results from these two runs are then compared. Throughput of the
		exerciser in Correctness check method is lesser than that of Consistency
		check.

(10) FPSCR:
		Specifies per thread input FPSCR value for the test case. The value
		should be specified in hex.

			e.g. : { 0xf8, 0, 0xe8, 0x40 }

		In this example, value of 0xf8 is assigned as the input FPSCR for the
		1st thread. 0x0 as the input FPSCR of 2nd thread and so on. All the
		values should be separated be ',' and the list should be enclosed in {}.


Instruction Filter and Bias Masks:
----------------------------------
		XXX_INS_MASK and INS_BIAS_MASK are 64 bit masks that are used to filter
		out instructions from getting built into test case and to specify
		instructions bias. Following format is used to specify per thread
		masks of these parameters.


			Bits: 0:7 | 8:15 16:23 24:31 32:39 40:47 48:55 56:63
				 ----   ----------------------------------------
				  ^						^
				  |						|
			 Base Category			Sub Category

		(a) Base Category:
			This is the basic category of instructions. This exerciser supports
			various types of instructions like VSX, BFP, DFP and VMX. So higher
			order 8-bits are used to represent
			the base category of instructions. These base categories are:

				0x01 : VSX Instructions
				0x02 : BFP Instructions
				0x03 : DFP Instructions

		(b) Sub Category:
			For providing fine grained instructions bias control, each category
			is divided into sub-categories. Each bit of [8:63] in a 64 bit mask
			represents the sub category of a given base category. This allows to
			specify biasing at a sub-category level. Details of these sub-
			categories are given under various base categories.

(11) VSX_INS_MASK:
		Specifies a bit mask that is used to pick VSX instructions from the
		master table and copy into enabled instructions table. The mask is a
		64-bit enable instructions mask. This and all other "instruction masks
		and instruction bias masks" uses same 64 bit mask format. These masks
		are explained in detail above.

			e.g. : [ 0x01001fffffffffff, 0x010000000000000f,
					 0x010000000000ffff, 0x01000CB00054ffff ]

		In this example, 4 VSX instruction masks are specified. One each for
		up to 4 threads. 0x01 in the high significant byte indicates a VSX
		category so rest of [8:63] bits are interpreted accordingly.

		Various sub categories for the VSX base category are:

			Bit 63 : VSX_SCALAR_DP_LOAD_ONLY
 				62 : VSX_SCALAR_DP_STORE_ONLY
				61 : VSX_SCALAR_DP_MOVE_ONLY
				60 : VSX_SCALAR_DP_FP_ARITHMETIC_ONLY
				59 : VSX_SCALAR_DP_FP_MUL_ADD_ONLY
				58 : VSX_SCALAR_DP_FP_COMP_ONLY
				57 : VSX_SCALAR_DP_FP_MAX_MIN_ONLY
				56 : VSX_SCALAR_SP_CONV_DP_ONLY
				55 : VSX_SCALAR_DP_CONV_SP_ONLY
				54 : VSX_SCALAR_DP_CONV_FP2INT_ONLY
				53 : VSX_SCALAR_DP_CONV_INT2FP_ONLY
				52 : VSX_SCALAR_DP_RND_2_FPINT_ONLY
				51 : VSX_VECTOR_SP_LOAD_ONLY
				50 : VSX_VECTOR_DP_LOAD_ONLY
				49 : VSX_VECTOR_SP_STORE_ONL
				48 : VSX_VECTOR_DP_STORE_ONL
				47 : VSX_VECTOR_SP_MOVE_ONLY
				46 : VSX_VECTOR_DP_MOVE_ONLY
				45 : VSX_VECTOR_SP_FP_ARITHMETIC_ONLY
				44 : VSX_VECTOR_DP_FP_ARITHMETIC_ONLY
				43 : VSX_VECTOR_SP_FP_MUL_ADD_ONLY
				42 : VSX_VECTOR_DP_FP_MUL_ADD_ONLY
				41 : VSX_VECTOR_SP_FP_COMP_ONLY
				40 : VSX_VECTOR_DP_FP_COMP_ONLY
				39 : VSX_VECTOR_SP_FP_MAX_MIN_ONLY
				38 : VSX_VECTOR_DP_FP_MAX_MIN_ONLY
				37 : VSX_VECTOR_SP_CONV_DP_ONLY
				36 : VSX_VECTOR_DP_CONV_SP_ONLY
				35 : VSX_VECTOR_SP_CONV_FP2INT_ONLY
				34 : VSX_VECTOR_DP_CONV_FP2INT_ONLY
				33 : VSX_VECTOR_SP_CONV_INT2FP_ONLY
				32 : VSX_VECTOR_DP_CONV_INT2FP_ONLY
				31 : VSX_VECTOR_SP_RND_2_FPINT_ONLY
				30 : VSX_VECTOR_DP_RND_2_FPINT_ONLY
				29 : VSX_MISC_ONLY /* logical, merge, splat, permute, shift */
				8-28: Not defined yet.

(12) BFP_INS_MASK :
		Specifies a bit mask that is used to pick BFP instructions from the
		master table and copy into enabled instructions table. The mask is a
		64-bit enable instructions mask. The encoding of this mask is also
		exactly the same way as explained above. The base category for BFP is
		0x02. Sub categories are:

			Bit 63 : BFP_LOAD_SP
				62 : BFP_LOAD_DP
				61 : BFP_LOAD_INT
				60 : BFP_STORE_SP
				59 : BFP_STORE_DP
				58 : BFP_STORE_INT
				57 : BFP_ELEM_ARITH_SP
				56 : BFP_ELEM_ARITH_DP
				55 : BFP_ADD_MUL_SP
				54 : BFP_ADD_MUL_DP
				53 : BFP_MOVE_ONLY
				52 : BFP_ROUND_2_SP
				51 : BFP_ROUND_2_INT
				50 : BFP_CONV_2_INT
				49 : BFP_CONV_FROM_INT
				48 : BFP_COMPARE_ONLY
				47 : BFP_SELECT_ONLY
				46 : BFP_FPSCR_ONLY
				45 : BFP_TEST_ONLY
				8-44 : Not defined yet.


(13) BFP_DATA_BIAS_MASK:
		Specifies a the data biasing for both BFP and VSX instructions.
		There are following interesting data zones for Floating Point nos.


			-Normalized No			 0					+Normalized No
		<-|----------------|-------------|-------------|----------------|->
		-Inf				-Denorm			+Denorm						+Inf

		This exerciser supports biasing the FP nos to following zones:
			(1) NORMAL
			(2) DENORMAL
			(3) QNAN
			(4) NEAR_INF(Normal nos towards infinity)
			(5) INF
			(6) SNAN
			(7) ZERO
			(8) DENORM_TOW_Z(denormal nos towards zero)
			(9) DENORM_TOW_N(denormal nos towards normal zone)
			(10)NORM_TOW_DN(small normal nos)

		This mask is 64-bit wide. Out of that lower-order 40 bits will be
		used for specifying the data biasing towards the zones mentioned above.
		Rest should be ideally kept as 0s. Numbers placed in low significant
		nibbles represent the percentage of data bias for that zone.

		Detailed bit mask representation :

		0.......23|24:27|28:31|32:35|36:39|40:43|44:47|48:51|52:55|56:59|60:63
		---------- ----- ----- ----- ----- ----- ----- ----- ----- ----- -----
					(10)  (9)   (8)   (7)   (6)   (5)   (4)   (3)   (2)   (1)


		A value of 0x0 to 0xA should be placed in the nibble location for each
		data zones. 0x0 - 0%, 0x1 - 10% and so on up to 0xa being 100%.

			e.g. : { 0x1111111111, 0x000000000A, 0x0005050000, 0x0000340300 }

					Thread 0: 10% data of each data type.
					Thread 1: 100% Normal numbers.
					Thread 2: 50% Zeros and 50% Infinities.
					Thread 3: 30% SNaNs, 40% Infinity and 30% QNaNs

		While writting BFP_DATA_BIAS_MASK, please ensure that all the bias
		percentages for a given thread sum up to 100%. If not, BFP_ALL will be
		assiged residue.

(14) INS_BIAS_MASK:
		This parameter is used to define the biasing of various instruction sub
		groups in the test case. There are several sub groups under each group
		of BFP, VSX. Using this parameter, the generated instruction stream can
		be biased towards one or few instruction sub groups. For example, 100%
		biasing towards BFP DP load/store will generate a stream that will only
		have DP load/store instructions. Other stream can be generated having
		only computational instructions. Very fine level of biasing can be
		achieved by using the instruction sub groups mentioned above. Relative
		biasing between BFP and VSX instructions can also be achieved using
		this parameter.

			e.g. : 			{(0x01001fffffffffff, 80) (0x020000000003ffff, 20):
                             (0x0100000000222222, 50) (0x0100000000111111, 50):
                             (0x0100000000333333, 50) (0x0100000000444444, 50):
                             (0x0100000000666666, 50) (0x0100000000555555, 50)}

		The parameter declaration is in the form of various ordered-pairs of
		instruction masks and percentage (<mask>, <%>). The ordered-pairs for
		different threads should be separated by ':' character. And the entire
		list should be enclosed in a {} pair.

		Thread 0: The parameter declaration above sets a biasing of 80% for all
				  VSX instructions and 20% for all BFP instructions. The stream
				  generated  will have 80% of VSX instruction. Among 80% VSX
				  instructions, relative percent of various sub groups will be
				  equal. Similarly, the relative biasing of various sub groups
				  of BFP will be equal. To know about all the subgroups and
				  their bit positions please refer rule parameter XXX_BIAS_MASK
				  for respective group.

					<------------------ Thread 0 ------------------>
				{	(0x01001fffffffffff, 80) (0x020000000003ffff, 20):
					 ------------------  ---  ------------------  ---
								^			^			^			^
								|			|			|			|
						  VSX_BIAS_MASK	  %age    BFP_BIAS_MASK   %age


				Similarly, instructions biasing can be specified for up to 4
				threads.
(15) DUMP_TESTCASE:
	Enables to dump the log file containing testcase details.
		Expected values:
			1	:	Enable dump
			0	:	Disable dump

