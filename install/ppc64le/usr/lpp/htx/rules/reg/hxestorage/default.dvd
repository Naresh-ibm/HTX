* @(#)64	1.3  src/htx/usr/lpp/htx/rules/reg/hxestorage/default.dvd, exer_storage, htxubuntu 5/6/15 00:24:09 *
*******************************************************************************
* COMPONENT_NAME: EXER_STORAGE
*******************************************************************************
*-                                                                          -*
*- This file should be reviewed completely before modification.  The        -*
*- stanzas are grouped by function, but are not necessarily in the order    -*
*- which they run in.  See the "skip" keyword in each stanza.  Each group   -*
*- has an introduction explaining.                                          -*
*-                                                                          -*
*----------------------------------------------------------------------------*
*-                                                             -*
*-  Stanza Name     Skip    Runs on                            -*
*-                                                             -*
*-  rule_1           9      every 9th                          -*
*-  rule_2           9                                         -*
*-                                                             -*
*-  rule_3           -99    First and every 99th pass.         -*
*-                                                             -*
*-  rule_4           -1     Passes  1, 3, 5, 7, ...            -*
*-  rule_5           -1                                        -*
*-  rule_6           -1                                        -*
*-                                                             -*
*-  rule_7           2      Passes  2, 4, 6, 8, ...            -*
*-  rule_8           2                                         -*
*-                                                             -*
*-  rule_9           3      Passes  3, 6, 9, 12, ...           -*
*-                                                             -*
*-  rule_10          4      Passes  4, 8, 12, 16, ...          -*
*-  rule_11          4                                         -*
*-  rule_12          4                                         -*
*-                                                             -*
*----------------------------------------------------------------------------*
*- STANZA 1: Sequentially write the entire disk on every  9th iteration of  -*
*-           the rules file.                                                -*
*-           This is first because it is traditionally here.                -*
*----------------------------------------------------------------------------*
rule_id = rule_1
pattern_id = #003
num_oper = 0
oper = w
num_threads = 1
transfer_size = 512BLK
seek_breakup_prcnt = 0
skip = 9

*----------------------------------------------------------------------------*
*- STANZA 2: creates 6 threads, Below are the operations done by each thread-*
*- Thread1: one thread doing RWRC oper and rest doing RC operation          -*
*- Thread 1: does SEQ RC operation from highest LBA.                        -*
*- Thread 2: does SEQ RC operation from lowest LBA.                         -*
*- Thread 3: does SEQ RWRC operation of 4 blocks 1024 times (24MB transfer) -*
*- Thread 4: does RC operation sequentially on entire disk                  -*
*- Thread 5: does RANDOM RC operation of 32 blocks 2048 times.              -*
*- Thread 6: does RANDOM RC operation of 4 blocks 4096 times.               -*
*----------------------------------------------------------------------------*
rule_id = rule_2
pattern_id = #003
num_oper = 4096 4096 1024 0 2048 4096 
num_threads = 6 
associativity = SEQ
oper = rc rc rwrc rc
transfer_size = [1BLK-4BLK,-1] [1BLK-4BLK,-1] 4BLK 512BLK [1BLK-32BLK,-1] 4BLK
seek_breakup_prcnt = 0 0 0 0 100
direction = DOWN UP
starting_block = TOP BOT
skip = 9


*---------------------------------------------------------------------------*
*- STANZA 3: runs on every 99th pass, creates 2 threads which initialize a -*
*- small area at the top and bottom of the disk.                           -*
*- Thread 1: does SEQ WRC oper on the 32MB of the highest LBAs on the disk -*
*- Thread 2: does SEQ W oper on the 128MB of the lowest LBAs on the disk.  -*
*---------------------------------------------------------------------------*
rule_id = rule_3
pattern_id = #003
num_oper = 32 128
num_threads = 2
oper = wrc w
seek_breakup_prcnt = 0
transfer_size = 512BLK
direction = DOWN UP
starting_block = TOP BOT
skip = -99

*---------------------------------------------------------------------------*
*- STANZA 4: runs on odd passes through the rules and depend upon the      -*
*- previous stanza. creates 2 threads and run on odd passes through the    -*
*- rules. below are thread details:                                        -*
*- Thread 1: does 2000 RANDOM RC operations of size between 2k-16K.        -*
*-           restricts to the lower 128 MB of the disk                     -*
*- Thread 2: does 2000 SEQ RC operations of size 8BLK. It operates on the  -*
*-           upper 32MB of the disk.                                       -*
*---------------------------------------------------------------------------*
rule_id = rule_4
pattern_id = #003
num_threads = 2
oper = RC
num_oper = 2000 
transfer_size = [1BLK-8BLK,-1] 
seek_breakup_prcnt = 100 0
direction = DOWN 
starting_block = TOP 
min_blkno = 0
max_blkno = 65536 1.0 
skip = -1

*---------------------------------------------------------------------------*
*- STANZA 5: runs single threaded on odd passes through the rules and      -*
*- depend upon the stanza 3. does Butterfly from outer edges. Does RC oper -*
*- 128 times of size 128K. 32MB transfer.                                  -*
*---------------------------------------------------------------------------*
rule_id = rule_5
pattern_id = #003
num_threads = 1
oper = RC 
num_oper = 128 
transfer_size = 128K 
seek_breakup_prcnt = 0
direction = IN 
starting_block = BOT
skip = -1

*---------------------------------------------------------------------------*
*- STANZA 6: runs single threaded on odd passes through the rules and      -*
*- depend upon the stanza 3. does Butterfly from middle outwards. Does WRC -*
*- operation of 64 blocks 64 times. 16MB trannsfer.                        -*
*---------------------------------------------------------------------------*
rule_id = rule_6
pattern_id = #003
num_threads = 1
oper = WRC 
num_oper = 64
transfer_size = 128K 
seek_breakup_prcnt = 0
direction = OUT
starting_block = MID
skip = -1

*---------------------------------------------------------------------------*
*- STANZA 7: runs on even passes through the rules and do WRC of patterns  -*
*- HXPDB6 (0xdb6db6db, etc), CDM102 (random data from diagnostic test CD,  -*
*- see /usr/lpp/htx/patterns), #004 (timestamped 0xA5's). creates 3 threads-*
*- Below are thread details:                                               -*
*---------------------------------------------------------------------------*
rule_id = rule_7
pattern_id = HXPDB6 CDM102 #004
num_threads = 3
num_oper = 8
oper = wrc
transfer_size = 1MB
seek_breakup_prcnt = 0
min_blkno = 0.1 0.3 0.5
max_blkno = 0.2 0.4 0.6
skip = 2

*---------------------------------------------------------------------------*
*- STANZA 8: does cleanup of portion of disk written by previous stanza    -*
*---------------------------------------------------------------------------*   
rule_id = rule_8
pattern_id = #003
num_threads = 3
num_oper = 8
oper = w
transfer_size = 1MB
seek_breakup_prcnt = 0
min_blkno = 0.1 0.3 0.5
max_blkno = 0.2 0.4 0.6
skip = 2

*---------------------------------------------------------------------------*
*- STANZA 9: Creates 4 thread with below description:                      -*
*- Thread 1: SEQ RC oper of 2 blocks 1024 times, from middle going down.   -*
*-           4MB Transfer.                                                 -*
*- Thread 2: SEQ RC oper of 8 blocks 512 times, on lower 8MB of disk.      -*
*- Thread 3: SEQ RC oper of 2 blocks 1024 times, from top going down.      -*
*-           4MB Transfer                                                  -*
*- Thread 4: RANDOM RC oper of 2 blocks 512 times, lower 128 MB of disk.   -*
*---------------------------------------------------------------------------*
rule_id = rule_9
pattern_id = #003
num_threads = 4
oper = rc
num_oper = 1024 512
seek_breakup_prcnt = 0 0 0 100
transfer_size = 2BLK [1BLK-8BLK,-1] 2BLK 2BLK
direction = DOWN UP
starting_block = MID BOT TOP BOT
max_blkno = 1.0 1.0 1.0 65536
skip = 3

*---------------------------------------------------------------------------*
*- STANZA 10: Runs on evry 4th pass of the rulefile. It first does 2 block -*
*- writes of pattern #004 with two blocks in between.                      -*
*---------------------------------------------------------------------------*
rule_id = rule_10
pattern_id = #004
num_oper = 1024
oper = w
num_threads = 1
seek_breakup_prcnt = 0
starting_block = 2
transfer_size = 2BLK
blk_hop = 2
skip = 4

*---------------------------------------------------------------------------*
*- STANZA 11: Creates 2 threads, each doing SEQ RC oper with pattern #003  -*
*- and #004(written by previous stanza) respectively.                      -*
*---------------------------------------------------------------------------*
rule_id = rule_11
pattern_id = #003 #004
num_oper = 1024
num_threads = 2
oper = rc
seek_breakup_prcnt = 0
transfer_size = 2BLK
starting_block = 0 2
blk_hop = 2
skip = 4

*---------------------------------------------------------------------------*
*- STANZA 12: Clean up of pattern #004 written by stanza 10.               -*
*---------------------------------------------------------------------------*
rule_id = rule_12
pattern_id = #003
num_oper = 8
oper = w
num_threads = 1
seek_breakup_prcnt = 0
transfer_size = 512BLK
skip = 4

